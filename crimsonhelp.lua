script_name('Crimson_Tide Helper')
script_authors('Cafferdam_Berser')

-- подключаем библиотеки
local dlstatus = require('moonloader').download_status

-- создаём переменные
update_state = false -- Если переменная == true, значит начнётся обновление.
update_found = false -- Если будет true, будет доступна команда /update.

local script_vers = 1.0
local script_vers_text = "v1.0" -- Название нашей версии. В будущем будем её выводить ползователю.

local update_url = 'https://raw.githubusercontent.com/DokaiiMob/AUCTH/main/update.ini?token=GHSAT0AAAAAAB5IMAWTDADWJ3AXVZGN5JHAY55MAUQ' -- Путь к ini файлу. Позже нам понадобиться.
local update_path = getWorkingDirectory() .. "/update.ini"

local script_url = 'https://github.com/DokaiiMob/AUCTH2/commit/3caf257ea9b2406636ab9631df6227d25882858c' -- Путь скрипту.
local script_path = thisScript().path

-- готовый код
function check_update() -- Создаём функцию которая будет проверять наличие обновлений при запуске скрипта.
    downloadUrlToFile(update_url, update_path, function(id, status)
        if status == dlstatus.STATUS_ENDDOWNLOADDATA then
            updateIni = inicfg.load(nil, update_path)
            if tonumber(updateIni.info.vers) > script_vers then -- Сверяем версию в скрипте и в ini файле на github
                sampAddChatMessage("{FFFFFF}Имеется {32CD32}новая {FFFFFF}версия скрипта. Версия: {32CD32}"..updateIni.info.vers_text..". {FFFFFF}/update что-бы обновить", 0xFF0000) -- Сообщаем о новой версии.
                update_found == true -- если обновление найдено, ставим переменной значение true
            end
            os.remove(update_path)
        end
    end)
end

function main()
    if not isSampLoaded() or not isSampfuncsLoaded() then return end
    while not isSampAvailable() do wait(100) end
	
local imgui         = require("mimgui")
local vKeys         = require('vKeys')
local inicfg        = require("inicfg")
local memory        = require("memory")
local ev            = require("lib.samp.events")
local faicons       = require("fAwesome5")
local encoding      = require("encoding")
local mem           = require("memory")
local ffi           = require ("ffi")

local getBonePosition = ffi.cast("int (__thiscall*)(void*, float*, int, bool)", 0x5E4280)

local cx = representIntAsFloat(readMemory(0xB6EC10, 4, false))
local cy = representIntAsFloat(readMemory(0xB6EC14, 4, false))
local w, h = getScreenResolution()
local xc, yc = w * cy, h * cx

encoding.default = 'CP1251'
local u8 = encoding.UTF8
local new = imgui.new

local font = renderCreateFont("Arial", 14, 10)

local aim = {
	renderWindow = {
		renderWindow = new.bool(),
        renderSettings = new.bool()
	},
	CheckBox = {
        enableAim = new.bool(),
        checkBuild = new.bool(),
        checkVehicle = new.bool(),
        checkObject = new.bool(),
        bone = new.int(1),
        enableProAim = new.bool(),
        enableLagger = new.bool(),
        noSpread = new.bool(),
        autoshot = new.bool(),
        wallhack = new.bool(),
        line = new.bool(),
        box = new.bool(),
        distPed = new.bool(),
        nameTag = new.bool(),
        noCamRestore = new.bool(),
        antistun = new.bool(),
        fullSkill = new.bool(),
        noReload = new.bool(),
        plusC = new.bool(),
        CBUGHelper = new.bool(),
        noFall = new.bool(),
        team = new.bool(),
        themes = new.int(0),
        silentAim = new.bool(),
        silentFov = new.float(),
        silentMaxDist = new.float(),
        missRatio = new.float(),
        silentShootWalls = new.bool()
	},
	Sliders = {
        Smooth = new.float(),
        Fov = new.float(),
        lagX = new.float(),
        lagY = new.float(),
        lagZ = new.float(),
        speedX = new.float(),
        speedY = new.float(),
        speedZ = new.float(),
        maxDistAim = new.float(),
        maxDistPro = new.float()
	}, Buttons = {
        save = new.bool(),
        reset = new.bool()
    }
}


function main()
    repeat wait(0) until isSampAvailable()
    wait(1000)
    msg("Загружен, версия скрипта v0.7.2")
    msg("Меню: /ctw")
    msg("Автор скрипта {FF2B2B}Cafferdam")
    iniLoad()
    lua_thread.create(Aimbot)
	sampRegisterChatCommand("ctw", function()
		aim.renderWindow.renderWindow[0] = not aim.renderWindow.renderWindow[0]
    end)
    local PI = 3.14159
    while true do wait(0)

        if aim.CheckBox.enableLagger[0] then
            if not isCharInAnyCar(PLAYER_PED) then
                local x, y, z = getCharCoordinates(PLAYER_PED)
                local data = samp_create_sync_data('player')

                    data.position.x = x + aim.Sliders.lagX[0]
                    data.position.y = y + aim.Sliders.lagY[0]
                    data.position.z = z + aim.Sliders.lagZ[0]

                    data.moveSpeed.x = aim.Sliders.speedX[0]
                    data.moveSpeed.y = aim.Sliders.speedY[0]
                    data.moveSpeed.z = aim.Sliders.speedZ[0]

                data.send()
            end
        end

        if aim.CheckBox.noSpread[0] then
            memory.setfloat(0x8D2E64, 0)            
        else
            memory.setfloat(0x8D2E64, memory.getfloat(0x8D2E64))
        end

        if aim.CheckBox.autoshot[0] and not isCharInAnyCar(PLAYER_PED) and not isCharDead(PLAYER_PED) then
            local int = readMemory(0xB6F3B8, 4, 0)
			int=int + 0x79C
			local intS = readMemory(int, 4, 0)
				if intS > 0
				then
				local lol = 0xB73458
				lol=lol + 34
				writeMemory(lol, 4, 255, 0)
				local int = readMemory(0xB6F3B8, 4, 0)
				int=int + 0x79C
                writeMemory(int, 4, 0, 0)
            end
        end

        if aim.CheckBox.wallhack[0] then
            for i = 0, sampGetMaxPlayerId() do
                if sampIsPlayerConnected(i) then
                    local result, handlePed = sampGetCharHandleBySampPlayerId(i)
					local color_ped = sampGetPlayerColor(i)
					local a, r, g, b = explode_argb(color_ped)
					local color = join_argb(255, r, g, b)
					if result and doesCharExist(handlePed) and isCharOnScreen(handlePed) then
                        local pos = {getCharCoordinates(PLAYER_PED)}
                        local whpos = {getCharCoordinates(handlePed)}
                        local x1, y1 = convert3DCoordsToScreen(pos[1], pos[2], pos[3])
                        local x2, y2 = convert3DCoordsToScreen(whpos[1], whpos[2], whpos[3])
                        if aim.CheckBox.line[0] then
                            renderDrawPolygon(x1, y1, 8, 8, 16, 0.0, color)
                            renderDrawLine(x1, y1, x2, y2, 2, color)
                            renderDrawPolygon(x2, y2, 8, 8, 16, 0.0, color)
                        end
                        if aim.CheckBox.box[0] then
                            renderDrawBoxWithBorder(x2 - 65 / 2, y2 - 60, 65, 120, 0x00FFFFFF, 3, color)
                        end
                        if aim.CheckBox.nameTag[0] then
                            local whpos = {GetBodyPartCoordinates(8, handlePed)}
                            local x1, y1 = convert3DCoordsToScreen(pos[1], pos[2], pos[3])
                            local x2, y2 = convert3DCoordsToScreen(whpos[1], whpos[2], whpos[3])
                            local _, id = sampGetPlayerIdByCharHandle(handlePed)
                            local nick = sampGetPlayerNickname(id)
                            renderFontDrawText(font, nick.." | ID ["..id.."]" , x2, y2 - 50, color, -1)
                        end
                        if aim.CheckBox.distPed[0] then
                            local whpos = {GetBodyPartCoordinates(8, handlePed)}
                            local x1, y1 = convert3DCoordsToScreen(pos[1], pos[2], pos[3])
                            local x2, y2 = convert3DCoordsToScreen(whpos[1], whpos[2], whpos[3])
                            renderFontDrawText(font, 'Dist [ '..string.format('%0.2f', getDistanceBetweenCoords3d(pos[1], pos[2], pos[3], whpos[1], whpos[2], whpos[3]))..' ]', x2, y2 - 30, color, -1)
                        end
                    end
                end
            end
        end

        if aim.CheckBox.noCamRestore[0] then
            memory.write(0x5109AC, 235, 1, true)
	        memory.write(0x5109C5, 235, 1, true)
	        memory.write(0x5231A6, 235, 1, true)
	        memory.write(0x52322D, 235, 1, true)
	        memory.write(0x5233BA, 235, 1, true)
        end

        if aim.CheckBox.enableProAim[0] then
            if getCurrentCharWeapon(playerPed) ~= 0 then
                if isKeyDown(vKeys.VK_RBUTTON) then
                    local playerID = GetPedPro()
                    if playerID ~= -1 then
                        local result, v = sampGetCharHandleBySampPlayerId(playerID)
                        if result then
                            if doesCharExist(v) and not isCharDead(v) then
                                if v ~= playerPed then
                                    local my_pos = {getCharCoordinates(playerPed)}
                                    local other_pos = {getCharCoordinates(playerPed)}
                                    local camCoordX, camCoordY, camCoordZ = getActiveCameraCoordinates()
                                    local targetCamX, targetCamY, targetCamZ = getActiveCameraPointAt()
                                    local heading = getCharHeading(playerPed)
                                    local angle = getHeadingFromVector2d(targetCamX - camCoordX, targetCamY - camCoordY)
                                    local vector = {my_pos[1] - camCoordX, my_pos[2] - camCoordY}
                                    setCharCoordinates(v, (my_pos[1] + math.sin(-math.rad(angle)) * 1.1) + (math.sin(-math.rad(angle)) / 2) - (0.3 * math.sin(-math.rad(angle + 90))), (my_pos[2] + math.cos(-math.rad(angle)) * 1.1) + (math.cos(-math.rad(angle)) / 2) - (0.3 * math.cos(-math.rad(angle + 90))), my_pos[3] - 0.6)
                                    setCharHeading(v, heading)
                                end
                            end
                        end
                    end
                end
            end
        end

        if aim.CheckBox.antistun[0] and not isCharDead(PLAYER_PED) then
            local anim = {'DAM_armL_frmBK', 'DAM_armL_frmFT', 'DAM_armL_frmLT', 'DAM_armR_frmBK', 'DAM_armR_frmFT', 'DAM_armR_frmRT', 'DAM_LegL_frmBK', 'DAM_LegL_frmFT', 'DAM_LegL_frmLT', 'DAM_LegR_frmBK', 'DAM_LegR_frmFT', 'DAM_LegR_frmRT', 'DAM_stomach_frmBK', 'DAM_stomach_frmFT', 'DAM_stomach_frmLT', 'DAM_stomach_frmRT'}
		    for k, v in pairs(anim) do
			    if isCharPlayingAnim(PLAYER_PED, v) then
				    setCharAnimSpeed(PLAYER_PED, v, 999)
			    end
		    end
        end

        if aim.CheckBox.fullSkill[0] then
        	memory.setint8(0x969179, 1, false)
		else
			memory.setint8(0x969179, 0, false)
        end
        
        if aim.CheckBox.noReload[0] then
            local weap = getCurrentCharWeapon(PLAYER_PED)
			local nbs = raknetNewBitStream()
			raknetBitStreamWriteInt32(nbs, weap)
			raknetBitStreamWriteInt32(nbs, 0)
			raknetEmulRpcReceiveBitStream(22, nbs)
			raknetDeleteBitStream(nbs)
        end

        if aim.CheckBox.plusC[0] then
            local gun = getCurrentCharWeapon(PLAYER_PED)
			if isCharShooting(PLAYER_PED) and gun == 24 then
                wait(1)
                taskPlayAnimNonInterruptable(PLAYER_PED, "HIT_WALK", "PED", 4.0, 0, 1, 1, 0, 1)
            end
        end

        if aim.CheckBox.CBUGHelper[0] then
            if isButtonPressed(PLAYER_HANDLE, 6) and isKeyJustPressed(vKeys.VK_R) then
                sendKey(4)
                setGameKeyState(17, 255)
                wait(55)
                setGameKeyState(6, 0)
                sendKey(2)
                setGameKeyState(18, 255)
            end
        end

        if aim.CheckBox.noFall[0] and (isCharPlayingAnim(PLAYER_PED, 'KO_SKID_BACK') or isCharPlayingAnim(PLAYER_PED, 'FALL_COLLAPSE')) then
            clearCharTasksImmediately(PLAYER_PED)
        end

    end
end

local list_menu = {curret = 1, list = {u8'Главное меню', u8'Стелс Аим', u8'Про Аим', u8'Сайлент Аим', u8'Лаггер', u8'ВХ', u8'Прочее'}}

local function OnOffButton(text, sizeImVec2, bool)
    if bool then
        imgui.PushStyleColor(imgui.Col.Button, imgui.ImVec4(0.149, 0.692, 0.072, 0.602))
        imgui.PushStyleColor(imgui.Col.ButtonHovered, imgui.ImVec4(0.149, 0.692, 0.072, 0.800))
        imgui.PushStyleColor(imgui.Col.ButtonActive, imgui.ImVec4(0.149, 0.692, 0.072, 0.602))
    else
        imgui.PushStyleColor(imgui.Col.Button, imgui.ImVec4(1.00, 0.19, 0.19, 0.40))
        imgui.PushStyleColor(imgui.Col.ButtonHovered, imgui.ImVec4(1.00, 0.19, 0.19, 0.800))
        imgui.PushStyleColor(imgui.Col.ButtonActive, imgui.ImVec4(1.00, 0.19, 0.19, 0.40))
    end
    local result = imgui.Button(text, sizeImVec2)
    imgui.PopStyleColor(3)
    return result
end

local newFrame = imgui.OnFrame(
	function() return aim.renderWindow.renderWindow[0] end,
	function(player)

        local sizeX, sizeY = getScreenResolution()
		imgui.SetNextWindowPos(imgui.ImVec2(sizeX / 2, sizeY / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))
        imgui.SetNextWindowSize(imgui.ImVec2(600, 500), imgui.Cond.FirstUseEver)

		imgui.Begin(u8"Аим-Асист от Cafferdam v0.7.2", aim.renderWindow.renderWindow, imgui.WindowFlags.NoResize + imgui.WindowFlags.NoCollapse)
            imgui.PushFont(font16)

                imgui.SetCursorPosX(24)
                for number, ml in ipairs(list_menu.list) do
                    if HeaderButton(list_menu.curret == number, ml) then
                        list_menu.curret = number
                    end
                    if number ~= #list_menu.list then
                        imgui.SameLine(nil, 30)
                    end
                end

                imgui.SetCursorPosY(72)
                imgui.Separator()
            imgui.PopFont()
            imgui.PushFont(font16)

            if list_menu.curret == 1 then
                imgui.Image(menuLogo, imgui.ImVec2(572, 278))
            elseif list_menu.curret == 2 then
                imgui.SetWindowSizeVec2(imgui.ImVec2(600, 540))

                if OnOffButton(u8'Стелс Аим', imgui.ImVec2(-1, 24), aim.CheckBox.enableAim[0]) then
                    aim.CheckBox.enableAim[0] = not aim.CheckBox.enableAim[0]
                end

                imgui.NewLine()

                imgui.PushItemWidth(480)
                    imgui.SliderFloat(u8"СА: Угол", aim.Sliders.Fov, 1.0, 180)
                    imgui.SliderFloat(u8"СА: Плавность", aim.Sliders.Smooth, 0.6, 50)
                    imgui.SliderFloat(u8"СА: Дистанция", aim.Sliders.maxDistAim, 1.0, 300)
                imgui.PopItemWidth()
                
                imgui.NewLine()

                imgui.BeginChild(u8"##ChildAim1", imgui.ImVec2(-1, 140), true)

                    imgui.BeginGroup()
                        imgui.Checkbox(u8"Чек зданий", aim.CheckBox.checkBuild)
                        imgui.Checkbox(u8"Чек машин", aim.CheckBox.checkVehicle)
                        imgui.Checkbox(u8"Чек объектов", aim.CheckBox.checkObject)
                    imgui.EndGroup()

                    imgui.SameLine()

                    imgui.BeginGroup()
                        imgui.RadioButtonIntPtr(u8"Голова", aim.CheckBox.bone, 0)
                        imgui.RadioButtonIntPtr(u8"Торс", aim.CheckBox.bone, 1)
                        imgui.RadioButtonIntPtr(u8"Пах", aim.CheckBox.bone, 2)
                    imgui.EndGroup()

                    imgui.SameLine(320)

                    imgui.BeginGroup()
                        local posX, posY = -1, -1;
                        if aim.CheckBox.team[0] then
                            imgui.PushStyleColor(imgui.Col.Button, imgui.ImVec4(0.149, 0.692, 0.072, 0.602))
                            imgui.PushStyleColor(imgui.Col.ButtonHovered, imgui.ImVec4(0.149, 0.692, 0.072, 0.800))
                            imgui.PushStyleColor(imgui.Col.ButtonActive, imgui.ImVec4(0.149, 0.692, 0.072, 0.602))
                            if imgui.Button(u8'Стрельба по своим', imgui.ImVec2(posX, posY)) then
                                aim.CheckBox.team[0] = not aim.CheckBox.team[0]
                            end
                        else
                            imgui.PushStyleColor(imgui.Col.Button, imgui.ImVec4(1.00, 0.19, 0.19, 0.40))
                            imgui.PushStyleColor(imgui.Col.ButtonHovered, imgui.ImVec4(1.00, 0.19, 0.19, 0.800))
                            imgui.PushStyleColor(imgui.Col.ButtonActive, imgui.ImVec4(1.00, 0.19, 0.19, 0.40))
                            if imgui.Button(u8'Стрельба по своим', imgui.ImVec2(posX, posY)) then
                                aim.CheckBox.team[0] = not aim.CheckBox.team[0]
                            end
                        end
                        imgui.PopStyleColor(3)
                    imgui.EndGroup()
                imgui.EndChild()

            elseif list_menu.curret == 3 then
                imgui.SetWindowSizeVec2(imgui.ImVec2(600, 300))

                if OnOffButton(u8'Про Аим', imgui.ImVec2(-1, 24), aim.CheckBox.enableProAim[0]) then
                    aim.CheckBox.enableProAim[0] = not aim.CheckBox.enableProAim[0]
                end
                imgui.NewLine()
                imgui.PushItemWidth(460)
                imgui.SliderFloat(u8"ПРО: Дистанция", aim.Sliders.maxDistPro, 1.0, 300)
                imgui.PopItemWidth()

            elseif list_menu.curret == 4 then
                imgui.SetWindowSizeVec2(imgui.ImVec2(600, 440))

                local posX, posY = -1, 24

                if OnOffButton(u8'Сайлент Аим', imgui.ImVec2(-1, 24), aim.CheckBox.silentAim[0]) then
                    aim.CheckBox.silentAim[0] = not aim.CheckBox.silentAim[0]
                end

                imgui.BeginChild(u8'##ChildSilent', imgui.ImVec2(-1, 180), true)
                    if aim.CheckBox.silentShootWalls[0] then
                        imgui.PushStyleColor(imgui.Col.Button, imgui.ImVec4(0.149, 0.692, 0.072, 0.602))
                        imgui.PushStyleColor(imgui.Col.ButtonHovered, imgui.ImVec4(0.149, 0.692, 0.072, 0.800))
                        imgui.PushStyleColor(imgui.Col.ButtonActive, imgui.ImVec4(0.149, 0.692, 0.072, 0.602))
                        if imgui.Button(u8'Прострел Стен', imgui.ImVec2(posX, posY)) then
                            aim.CheckBox.silentShootWalls[0] = not aim.CheckBox.silentShootWalls[0]
                        end
                    else
                        imgui.PushStyleColor(imgui.Col.Button, imgui.ImVec4(1.00, 0.19, 0.19, 0.40))
                        imgui.PushStyleColor(imgui.Col.ButtonHovered, imgui.ImVec4(1.00, 0.19, 0.19, 0.800))
                        imgui.PushStyleColor(imgui.Col.ButtonActive, imgui.ImVec4(1.00, 0.19, 0.19, 0.40))
                        if imgui.Button(u8'Прострел Стен', imgui.ImVec2(posX, posY)) then
                            aim.CheckBox.silentShootWalls[0] = not aim.CheckBox.silentShootWalls[0]
                        end
                    end
                    imgui.PopStyleColor(3)

                    imgui.NewLine()
                    
                    imgui.PushItemWidth(420)
                        imgui.SliderFloat(u8'СА: Угол Обзора', aim.CheckBox.silentFov, 1, 360)
                        imgui.SliderFloat(u8'СА: Дистанция', aim.CheckBox.silentMaxDist, 1, 600)
                        imgui.SliderFloat(u8'СА: Промахи [%]', aim.CheckBox.missRatio, 0, 100)
                    imgui.PopItemWidth()

                imgui.EndChild()

            elseif list_menu.curret == 5 then
                imgui.SetWindowSizeVec2(imgui.ImVec2(600, 440))

                imgui.SetCursorPosY(80)
                if OnOffButton(u8'Лаггер', imgui.ImVec2(-1, 24), aim.CheckBox.enableLagger[0]) then
                    aim.CheckBox.enableLagger[0] = not aim.CheckBox.enableLagger[0]
                end
                
                imgui.PushItemWidth(500)
                    imgui.SliderFloat(u8"Ось X", aim.Sliders.lagX, -1, 1)
                    imgui.SliderFloat(u8"Ось Y", aim.Sliders.lagY, -1, 1)
                    imgui.SliderFloat(u8"Ось Z", aim.Sliders.lagZ, -1, 1)

                    imgui.SliderFloat(u8"Скорость X", aim.Sliders.speedX, -1, 1)
                    imgui.SliderFloat(u8"Скорость Y", aim.Sliders.speedY, -1, 1)
                    imgui.SliderFloat(u8"Скорость Z", aim.Sliders.speedZ, -1, 1)
                imgui.PopItemWidth()

            elseif list_menu.curret == 6 then
                imgui.SetWindowSizeVec2(imgui.ImVec2(600, 410))

                imgui.SetCursorPosY(80)
                if OnOffButton(u8'Включить ВХ', imgui.ImVec2(-1, 24), aim.CheckBox.wallhack[0]) then
                    aim.CheckBox.wallhack[0] = not aim.CheckBox.wallhack[0]
                end

                imgui.BeginChild(u8"##ChildWh1", imgui.ImVec2(-1, 150), true)

                    if OnOffButton(u8'Линии к игроку', imgui.ImVec2(-1, 24), aim.CheckBox.line[0]) then
                        aim.CheckBox.line[0] = not aim.CheckBox.line[0]
                    end
                    if OnOffButton(u8'Бокс на игроке', imgui.ImVec2(-1, 24), aim.CheckBox.box[0]) then
                        aim.CheckBox.box[0] = not aim.CheckBox.box[0]
                    end
                    if OnOffButton(u8'Ники игроков', imgui.ImVec2(-1, 24), aim.CheckBox.nameTag[0]) then
                        aim.CheckBox.nameTag[0] = not aim.CheckBox.nameTag[0]
                    end
                    if OnOffButton(u8'Дистанция к игроку', imgui.ImVec2(-1, 24), aim.CheckBox.distPed[0]) then
                        aim.CheckBox.distPed[0] = not aim.CheckBox.distPed[0]
                    end

                imgui.EndChild()
            elseif list_menu.curret == 7 then
                imgui.SetWindowSizeVec2(imgui.ImVec2(600, 500))

                imgui.NewLine()

                imgui.BeginGroup()
                    imgui.Checkbox(u8"Анти Разброс", aim.CheckBox.noSpread)
                    imgui.Checkbox(u8"Авто Шот", aim.CheckBox.autoshot)
                    imgui.Checkbox(u8"Но-кам-рестор", aim.CheckBox.noCamRestore)
                imgui.EndGroup()
                
                imgui.SameLine(180)

                imgui.BeginGroup()
                    imgui.Checkbox(u8"Анти Стан", aim.CheckBox.antistun)
                    imgui.Checkbox(u8"Анти Падение", aim.CheckBox.noFall)
                    imgui.Checkbox(u8"Фулл Скриллы", aim.CheckBox.fullSkill)
                imgui.EndGroup()

                imgui.SameLine(340)

                imgui.BeginGroup()
                    imgui.Checkbox(u8"Анти Перезарядка", aim.CheckBox.noReload)
                    imgui.Checkbox(u8"+С хелпер", aim.CheckBox.plusC)
                    imgui.Checkbox(u8"Авто +С", aim.CheckBox.CBUGHelper)
                    imgui.TextQuestion(u8'Нажимай много раз кнопку R')
                imgui.EndGroup()

                imgui.NewLine()
                imgui.Separator()
                imgui.NewLine()

                if imgui.Button(faicons.ICON_FA_SAVE..u8" Сохранить настройки", imgui.ImVec2(278, 24)) then
                    iniSave()
                    sampAddChatMessage("{2F92E8}[Crimson Tide]: {EAEAEA}Настройки сохранены.")
                end imgui.TextQuestion(u8'Созраняет настройки чита')
                imgui.SameLine()
                if imgui.Button(faicons.ICON_FA_FILE_EXCEL..u8" Сброс настроек", imgui.ImVec2(278, 24)) then
                    iniReset() iniLoad()
                    sampAddChatMessage("{2F92E8}[Crimson Tide]: {EAEAEA}Настройки сброшены.")
                end imgui.TextQuestion(u8'Восстанавливает стандартные настройки чита')
                if imgui.Button(faicons.ICON_FA_COGS..u8" Настройки меню", imgui.ImVec2(-1, 24)) then
                    aim.renderWindow.renderSettings[0] = not aim.renderWindow.renderSettings[0]
                end
                if imgui.Button(faicons.ICON_FA_FILE_UPLOAD..u8' Выгрузка', imgui.ImVec2(278, 24)) then
                    thisScript():unload()
                end imgui.TextQuestion(u8'Выгружает чит из игры')
                imgui.SameLine()
                if imgui.Button(faicons.ICON_FA_TRASH..u8' Удаляет чит', imgui.ImVec2(278, 24)) then
                    if doesFileExist('moonloader\\crimson.lua') then
                        os.remove('moonloader\\crimson.lua')
                    end
                    if doesFileExist('moonloader\\config\\Crimson Tide by Cafferdam.ini') then
                        os.remove('moonloader\\config\\Crimson Tide by Cafferdam.ini')
                    end
                    thisScript():unload()
                end imgui.TextQuestion(u8'Удаляет чит, конфиг из папки и выгружает из игры')
            end

                imgui.NewLine()
            imgui.Separator()
                imgui.NewLine()

                imgui.NewLine()
                imgui.SameLine(178)
                imgui.Text(u8' YouTube Канал Cafferdam: ')
                imgui.SameLine()
                if imgui.Link(faicons.ICON_FA_HEART.."   My YouTube   "..faicons.ICON_FA_HEART) then
                    os.execute(('explorer.exe "%s"'):format("https://www.youtube.com/channel/UCq3sp7TDyvetaeldN1bw68w"))
                end

                imgui.NewLine()
                imgui.SameLine(100)
                imgui.Text(u8'Реклама: Купить | Продать игровую валюту можно тут: ')
                imgui.SameLine()
                if imgui.Link(faicons.ICON_FA_CHEVRON_RIGHT.."  VK  "..faicons.ICON_FA_CHEVRON_LEFT) then
                    os.execute(('explorer.exe "%s"'):format("https://vk.com/sanurial"))
                end

            imgui.NewLine()
        imgui.Separator()
            imgui.PopFont()
		imgui.End()

        if aim.CheckBox.themes[0] == 0 then
            themeOne()
        elseif aim.CheckBox.themes[0] == 1 then
            themeTwo()
        elseif aim.CheckBox.themes[0] == 2 then
            themeThree()
        elseif aim.CheckBox.themes[0] == 3 then
            themeFour()
        end

	end
)

local newFrame = imgui.OnFrame(
	function() return aim.renderWindow.renderSettings[0] end,
	function(player)

        local sizeX, sizeY = getScreenResolution()
		imgui.SetNextWindowPos(imgui.ImVec2(sizeX / 2, sizeY / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))
        imgui.SetNextWindowSize(imgui.ImVec2(300, 300), imgui.Cond.FirstUseEver)

        imgui.Begin(u8"Настройка меню", aim.renderWindow.renderSettings, imgui.WindowFlags.NoResize + imgui.WindowFlags.NoCollapse)
            imgui.PushFont(font18)

                imgui.BeginChild(u8'##Themes', imgui.ImVec2(270, 220), true)

                    imgui.SetCursorPos(imgui.ImVec2(94, 8))
                    imgui.TextColoredRGB('Темы')
                    imgui.Separator()

                    if imgui.Selectable(u8'Вишнёвая тема\n\n') then
                        aim.CheckBox.themes[0] = 0
                    elseif imgui.Selectable(u8'Тёмная тема\n\n') then
                        aim.CheckBox.themes[0] = 1
                    elseif imgui.Selectable(u8'Розовая тема | by Cafferdam\n\n') then
                        aim.CheckBox.themes[0] = 2
                    elseif imgui.Selectable(u8'Темно-зеленая тема\n\n') then
                        aim.CheckBox.themes[0] = 3
                    end
                
                imgui.EndChild()

                imgui.CenterTextColoredRGB('Crimson Tide by Cafferdam')

            imgui.PopFont()
        imgui.End()
    end
)

function fix(angle)
    if angle > math.pi then
        angle = angle - (math.pi * 2)
    elseif angle < -math.pi then
        angle = angle + (math.pi * 2)
    end
    return angle
end

function sendKey(key)
    local _, myId = sampGetPlayerIdByCharHandle(PLAYER_PED)
    local data = allocateMemory(68)
    sampStorePlayerOnfootData(myId, data)
    setStructElement(data, 4, 2, key, false)
    sampSendOnfootData(data)
    freeMemory(data)
end

function GetNearestPed(fov)
    local maxDistance = aim.Sliders.maxDistAim[0]
    local nearestPED = -1
    for i = 0, sampGetMaxPlayerId(true) do
        if sampIsPlayerConnected(i) then
            local find, handle = sampGetCharHandleBySampPlayerId(i)
            if find then
                if isCharOnScreen(handle) then
                    if not isCharDead(handle) then
                        local _, currentID = sampGetPlayerIdByCharHandle(PLAYER_PED)
                        local enPos = {getCharCoordinates(handle)}
                        local myPos = {getActiveCameraCoordinates()}
                        local vector = {myPos[1] - enPos[1], myPos[2] - enPos[2], myPos[3] - enPos[3]}
                        if isWidescreenOnInOptions() then coefficentZ = 0.0778 else coefficentZ = 0.103 end
                        local angle = {(math.atan2(vector[2], vector[1]) + 0.04253), (math.atan2((math.sqrt((math.pow(vector[1], 2) + math.pow(vector[2], 2)))), vector[3]) - math.pi / 2 - coefficentZ)}
                        local view = {fix(representIntAsFloat(readMemory(0xB6F258, 4, false))), fix(representIntAsFloat(readMemory(0xB6F248, 4, false)))}
                        local distance = math.sqrt((math.pow(angle[1] - view[1], 2) + math.pow(angle[2] - view[2], 2))) * 57.2957795131
                        if distance > fov then check = true else check = false end
                        if not check then
                            local myPos = {getCharCoordinates(PLAYER_PED)}
                            local distance = math.sqrt((math.pow((enPos[1] - myPos[1]), 2) + math.pow((enPos[2] - myPos[2]), 2) + math.pow((enPos[3] - myPos[3]), 2)))
                            if (distance < maxDistance) then
                                nearestPED = handle
                                maxDistance = distance
                            end
                        end
                    end
                end
            end
        end
    end
    return nearestPED
end

function GetPedPro()
    local maxDistance = nil
    maxDistance = aim.Sliders.maxDistPro[0]
    local nearestPED = -1
    for i = 0, sampGetMaxPlayerId(true) do
        if sampIsPlayerConnected(i) then
            local find, handle = sampGetCharHandleBySampPlayerId(i)
            if find then
                if isCharOnScreen(handle) then
                    local crosshairPos = {convertGameScreenCoordsToWindowScreenCoords(339.1, 179.1)}
                    local enPos = {getCharCoordinates(handle)}
                    local bonePos = {convert3DCoordsToScreen(enPos[1], enPos[2], enPos[3])}
                    local distance = math.sqrt((math.pow((bonePos[1] - crosshairPos[1]), 2) + math.pow((bonePos[2] - crosshairPos[2]), 2)))
                    if distance < 1.0 or distance > 80.0 then check = true else check = false end
                    if not check then
                        local myPos = {getCharCoordinates(playerPed)}
                        local enPos = {getCharCoordinates(handle)}
                        local distance = math.sqrt((math.pow((enPos[1] - myPos[1]), 2) + math.pow((enPos[2] - myPos[2]), 2) + math.pow((enPos[3] - myPos[3]), 2)))
                        if (distance < maxDistance) then
                            nearestPED = i
                            maxDistance = distance
                        end
                    end
                end
            end
        end
    end
    return nearestPED
end

function Aimbot()
    if aim.CheckBox.enableAim[0] and isKeyDown(vKeys.VK_RBUTTON) then
        local handle = GetNearestPed(aim.Sliders.Fov[0])
        if handle ~= -1 then
            local myPos = {getActiveCameraCoordinates()}
            if aim.CheckBox.bone[0] == 0 then
                ednPos = {GetBodyPartCoordinates(6, handle)}
            elseif aim.CheckBox.bone[0] == 1 then
                ednPos = {GetBodyPartCoordinates(4, handle)}
            elseif aim.CheckBox.bone[0] == 2 then
                ednPos = {GetBodyPartCoordinates(3, handle)}
            end
            if aim.CheckBox.team[0] then
                if isLineOfSightClear(myPos[1], myPos[2], myPos[3], ednPos[1], ednPos[2], ednPos[3], aim.CheckBox.checkBuild[0], aim.CheckBox.checkVehicle[0], false, aim.CheckBox.checkObject[0], false) then
                    local vector = {myPos[1] - ednPos[1], myPos[2] - ednPos[2], myPos[3] - ednPos[3]}
                    if isWidescreenOnInOptions() then coefficentZ = 0.0778 else coefficentZ = 0.103 end
                    local angle = {(math.atan2(vector[2], vector[1]) + 0.04253), (math.atan2((math.sqrt((math.pow(vector[1], 2) + math.pow(vector[2], 2)))), vector[3]) - math.pi / 2 - coefficentZ)}
                    local view = {fix(representIntAsFloat(readMemory(0xB6F258, 4, false))), fix(representIntAsFloat(readMemory(0xB6F248, 4, false)))}
                    local difference = {angle[1] - view[1], angle[2] - view[2]}
                    local smooth = {difference[1] / aim.Sliders.Smooth[0], difference[2] / aim.Sliders.Smooth[0]}
                    setCameraPositionUnfixed((view[2] + smooth[2]), (view[1] + smooth[1]))
                end
            else
                for i = 0, sampGetMaxPlayerId() do
                    if sampIsPlayerConnected(i) then
                        local result, handlePed = sampGetCharHandleBySampPlayerId(i)
                        local color_ped = sampGetPlayerColor(i)
                        if result and color_ped ~= sampGetPlayerColor(select(2, sampGetPlayerIdByCharHandle(PLAYER_PED))) then
                            if isLineOfSightClear(myPos[1], myPos[2], myPos[3], ednPos[1], ednPos[2], ednPos[3], aim.CheckBox.checkBuild[0], aim.CheckBox.checkVehicle[0], false, aim.CheckBox.checkObject[0], false) then
                                local vector = {myPos[1] - ednPos[1], myPos[2] - ednPos[2], myPos[3] - ednPos[3]}
                                if isWidescreenOnInOptions() then coefficentZ = 0.0778 else coefficentZ = 0.103 end
                                local angle = {(math.atan2(vector[2], vector[1]) + 0.04253), (math.atan2((math.sqrt((math.pow(vector[1], 2) + math.pow(vector[2], 2)))), vector[3]) - math.pi / 2 - coefficentZ)}
                                local view = {fix(representIntAsFloat(readMemory(0xB6F258, 4, false))), fix(representIntAsFloat(readMemory(0xB6F248, 4, false)))}
                                local difference = {angle[1] - view[1], angle[2] - view[2]}
                                local smooth = {difference[1] / aim.Sliders.Smooth[0], difference[2] / aim.Sliders.Smooth[0]}
                                setCameraPositionUnfixed((view[2] + smooth[2]), (view[1] + smooth[1]))
                            end
                        end
                    end
                end
            end
        end
    end
    return false
end

function msg(text)
    sampAddChatMessage("{FF2B2B}[Crimson Tide]: {EAEAEA}"..text)
end

function GetBodyPartCoordinates(id, handle)
    local pedptr = getCharPointer(handle)
    local vec = ffi.new("float[3]")
    getBonePosition(ffi.cast("void*", pedptr), vec, id, true)
    return vec[0], vec[1], vec[2]
end

function getDamage(weap)
	local damage = {
		[22] = 8.25,
		[23] = 13.2,
		[24] = 46.200000762939,
		[25] = 30,
		[26] = 30,
		[27] = 30,
		[28] = 6.6,
		[29] = 8.25,
		[30] = 9.9,
		[31] = 9.9000005722046,
		[32] = 6.6,
		[33] = 25,
		[38] = 46.2
	}
	return (damage[weap] or 0) + math.random(1e9)/1e15
end

function rand() return math.random(-50, 50) / 100 end

function getpx()
	return ((w / 2) / getCameraFov()) * aim.CheckBox.silentFov[0]
end

function getClosestPlayerFromCrosshair()
	local R1, target = getCharPlayerIsTargeting(0)
	local R2, player = sampGetPlayerIdByCharHandle(target)
	if R2 then return player, target end
	local minDist = getpx()
	local closestId, closestPed = -1, -1
	for i = 0, 999 do
		local res, ped = sampGetCharHandleBySampPlayerId(i)
		if res then
			if getDistanceFromPed(ped) < aim.CheckBox.silentMaxDist[0] then
                local xi, yi = convert3DCoordsToScreen(getCharCoordinates(ped))
                local dist = math.sqrt( (xi - xc) ^ 2 + (yi - yc) ^ 2 )
                if dist < minDist then
                    minDist = dist
                    closestId, closestPed = i, ped
                end
			end
		end
	end
	return closestId, closestPed
end

function getDistanceFromPed(ped)
	local ax, ay, az = getCharCoordinates(1)
	local bx, by, bz = getCharCoordinates(ped)
	return math.sqrt( (ax - bx) ^ 2 + (ay - by) ^ 2 + (az - bz) ^ 2 )
end

function canPedBeShot(ped)
	local ax, ay, az = convertScreenCoordsToWorld3D(xc, yc, 0)
	local bx, by, bz = getCharCoordinates(ped)
	return not select(1, processLineOfSight(ax, ay, az, bx, by, bz + 0.7, true, false, false, true, false, true, false, false))
end

function getcond(ped)
	if aim.CheckBox.silentShootWalls[0] then return true
	else return canPedBeShot(ped) end
end

function ev.onSendBulletSync(data)
    math.randomseed(os.clock())
    if not aim.CheckBox.silentAim[0] then return end
    local weap = getCurrentCharWeapon(PLAYER_PED)
    if not getDamage(weap) then return end
    local id, ped = getClosestPlayerFromCrosshair()
    if id == -1 then return end
    if math.random(1, 100) < aim.CheckBox.missRatio[0] then return end
    if not getcond(ped) then return end
    data.targetType = 1
    local px, py, pz = getCharCoordinates(ped)
    data.targetId = id

    data.target = { x = px + rand(), y = py + rand(), z = pz + rand() }
    data.center = { x = rand(), y = rand(), z = rand() }

    lua_thread.create(function()
         wait(1)
        sampSendGiveDamage(id, getDamage(weap), weap, 3)
    end)
end

function join_argb(a, r, g, b)
    local argb = b  -- b
    argb = bit.bor(argb, bit.lshift(g, 8))  -- g
    argb = bit.bor(argb, bit.lshift(r, 16)) -- r
    argb = bit.bor(argb, bit.lshift(a, 24)) -- a
    return argb
end
  
function explode_argb(argb)
    local a = bit.band(bit.rshift(argb, 24), 0xFF)
    local r = bit.band(bit.rshift(argb, 16), 0xFF)
    local g = bit.band(bit.rshift(argb, 8), 0xFF)
    local b = bit.band(argb, 0xFF)
    return a, r, g, b
end

function iniLoad()
	mainIni = inicfg.load(nil, "Crimson Tide by Cafferdam.ini")
	if mainIni == nil then
		iniReset()
	else
		aim.Sliders.Smooth[0] = mainIni.Sliders.Smooth
        aim.Sliders.Fov[0] = mainIni.Sliders.Fov
        aim.Sliders.lagX[0] = mainIni.Sliders.lagX
        aim.Sliders.lagY[0] = mainIni.Sliders.lagY
        aim.Sliders.lagZ[0] = mainIni.Sliders.lagZ
        aim.Sliders.speedX[0] = mainIni.Sliders.speedX
        aim.Sliders.speedY[0] = mainIni.Sliders.speedY
        aim.Sliders.speedZ[0] = mainIni.Sliders.speedZ
        aim.Sliders.maxDistAim[0] = mainIni.Sliders.maxDistAim
        aim.Sliders.maxDistPro[0] = mainIni.Sliders.maxDistPro
        aim.CheckBox.noSpread[0] = mainIni.CheckBoxs.noSpread
        aim.CheckBox.autoshot[0] = mainIni.CheckBoxs.autoshot
        aim.CheckBox.wallhack[0] = mainIni.CheckBoxs.wallhack
        aim.CheckBox.line[0] = mainIni.CheckBoxs.line
        aim.CheckBox.box[0] = mainIni.CheckBoxs.box
        aim.CheckBox.nameTag[0] = mainIni.CheckBoxs.nameTag
        aim.CheckBox.distPed[0] = mainIni.CheckBoxs.distPed
        aim.CheckBox.noCamRestore[0] = mainIni.CheckBoxs.noCamRestore
        aim.CheckBox.antistun[0] = mainIni.CheckBoxs.antistun
        aim.CheckBox.fullSkill[0] = mainIni.CheckBoxs.fullSkill
        aim.CheckBox.noReload[0] = mainIni.CheckBoxs.noReload
        aim.CheckBox.plusC[0] = mainIni.CheckBoxs.plusC
        aim.CheckBox.CBUGHelper[0] = mainIni.CheckBoxs.CBUGHelper
        aim.CheckBox.noFall[0] = mainIni.CheckBoxs.noFall
        aim.CheckBox.checkBuild[0] = mainIni.CheckBoxs.checkBuild
        aim.CheckBox.checkVehicle[0] = mainIni.CheckBoxs.checkVehicle
        aim.CheckBox.checkObject[0] = mainIni.CheckBoxs.checkObject
        aim.CheckBox.bone[0] = mainIni.CheckBoxs.Bone
        aim.CheckBox.themes[0] = mainIni.CheckBoxs.themes
        aim.CheckBox.team[0] = mainIni.CheckBoxs.team
        aim.CheckBox.silentAim[0] = mainIni.CheckBoxs.silentAim
        aim.CheckBox.silentFov[0] = mainIni.CheckBoxs.silentFov
        aim.CheckBox.silentMaxDist[0] = mainIni.CheckBoxs.silentMaxDist
        aim.CheckBox.missRatio[0] = mainIni.CheckBoxs.missRatio
        aim.CheckBox.silentShootWalls[0] = mainIni.CheckBoxs.silentShootWalls
	end
end

function iniSave()
	inicfg.save({
		Sliders = {
			Smooth = aim.Sliders.Smooth[0],
            Fov = aim.Sliders.Fov[0],
            lagX = aim.Sliders.lagX[0],
            lagY = aim.Sliders.lagY[0],
            lagZ = aim.Sliders.lagZ[0],
            speedX = aim.Sliders.speedX[0],
            speedY = aim.Sliders.speedY[0],
            speedZ = aim.Sliders.speedZ[0],
            maxDistAim = aim.Sliders.maxDistAim[0],
            maxDistPro = aim.Sliders.maxDistPro[0]
		}, CheckBoxs = {
            noSpread = aim.CheckBox.noSpread[0],
            autoshot = aim.CheckBox.autoshot[0],
            wallhack = aim.CheckBox.wallhack[0],
            line = aim.CheckBox.line[0],
            box = aim.CheckBox.box[0],
            nameTag = aim.CheckBox.nameTag[0],
            distPed = aim.CheckBox.distPed[0],
            noCamRestore = aim.CheckBox.noCamRestore[0],
            antistun = aim.CheckBox.antistun[0],
            fullSkill = aim.CheckBox.fullSkill[0],
            noReload = aim.CheckBox.noReload[0],
            plusC = aim.CheckBox.plusC[0],
            CBUGHelper = aim.CheckBox.CBUGHelper[0],
            noFall = aim.CheckBox.noFall[0],
            checkBuild = aim.CheckBox.checkBuild[0],
            checkVehicle = aim.CheckBox.checkVehicle[0],
            checkObject = aim.CheckBox.checkObject[0],
            Bone = aim.CheckBox.bone[0],
            themes = aim.CheckBox.themes[0],
            team = aim.CheckBox.team[0],
            silentAim = aim.CheckBox.silentAim[0],
            silentFov = aim.CheckBox.silentFov[0],
            silentMaxDist = aim.CheckBox.silentMaxDist[0],
            missRatio = aim.CheckBox.missRatio[0],
            silentShootWalls = aim.CheckBox.silentShootWalls[0]
        }
	}, "Crimson Tide by Cafferdam.ini")
end

function iniReset()
    inicfg.save({
		Sliders = {
			Smooth = 1,
            Fov = 1,
            lagX = 0,
            lagY = 0,
            lagZ = 0,
            speedX = 0,
            speedY = 0,
            speedZ = 0,
            maxDistAim = 30,
            maxDistPro = 300
		}, CheckBoxs = {
            noSpread = false,
            autoshot = false,
            wallhack = false,
            line = false,
            box = false,
            nameTag = false,
            distPed = false,
            noCamRestore = false,
            antistun = false,
            fullSkill = false,
            noReload = false,
            plusC = false,
            CBUGHelper = false,
            noFall = false,
            checkBuild = false,
            checkVehicle = false,
            checkObject = false,
            Bone = 1,
            themes = 0,
            team = true,
            silentAim = false,
            silentFov = 8,
            silentMaxDist = 120,
            missRatio = 0,
            silentShootWalls = false
        }
	}, "Crimson Tide by Cafferdam.ini")
end

function samp_create_sync_data(sync_type, copy_from_player)
    local ffi = require 'ffi'
    local sampfuncs = require 'sampfuncs'
    -- from SAMP.Lua
    local raknet = require 'samp.raknet'
    require 'samp.synchronization'

    copy_from_player = copy_from_player or true
    local sync_traits = {
        player = {'PlayerSyncData', raknet.PACKET.PLAYER_SYNC, sampStorePlayerOnfootData},
        vehicle = {'VehicleSyncData', raknet.PACKET.VEHICLE_SYNC, sampStorePlayerIncarData},
        passenger = {'PassengerSyncData', raknet.PACKET.PASSENGER_SYNC, sampStorePlayerPassengerData},
        aim = {'AimSyncData', raknet.PACKET.AIM_SYNC, sampStorePlayerAimData},
        trailer = {'TrailerSyncData', raknet.PACKET.TRAILER_SYNC, sampStorePlayerTrailerData},
        unoccupied = {'UnoccupiedSyncData', raknet.PACKET.UNOCCUPIED_SYNC, nil},
        bullet = {'BulletSyncData', raknet.PACKET.BULLET_SYNC, nil},
        spectator = {'SpectatorSyncData', raknet.PACKET.SPECTATOR_SYNC, nil}
    }
    local sync_info = sync_traits[sync_type]
    local data_type = 'struct ' .. sync_info[1]
    local data = ffi.new(data_type, {})
    local raw_data_ptr = tonumber(ffi.cast('uintptr_t', ffi.new(data_type .. '*', data)))
    -- copy player's sync data to the allocated memory
    if copy_from_player then
        local copy_func = sync_info[3]
        if copy_func then
            local _, player_id
            if copy_from_player == true then
                _, player_id = sampGetPlayerIdByCharHandle(PLAYER_PED)
            else
                player_id = tonumber(copy_from_player)
            end
            copy_func(player_id, raw_data_ptr)
        end
    end
    -- function to send packet
    local func_send = function()
        local bs = raknetNewBitStream()
        raknetBitStreamWriteInt8(bs, sync_info[2])
        raknetBitStreamWriteBuffer(bs, raw_data_ptr, ffi.sizeof(data))
        raknetSendBitStreamEx(bs, sampfuncs.HIGH_PRIORITY, sampfuncs.UNRELIABLE_SEQUENCED, 1)
        raknetDeleteBitStream(bs)
    end
    -- metatable to access sync data and 'send' function
    local mt = {
        __index = function(t, index)
            return data[index]
        end,
        __newindex = function(t, index, value)
            data[index] = value
        end
    }
    return setmetatable({send = func_send}, mt)
end

function HeaderButton(bool, str_id)
    local DL = imgui.GetWindowDrawList()
    local ToU32 = imgui.ColorConvertFloat4ToU32
    local result = false
    local label = string.gsub(str_id, "##.*$", "")
    local duration = { 0.5, 0.3 }
    local cols = {
        idle = imgui.GetStyle().Colors[imgui.Col.TextDisabled],
        hovr = imgui.GetStyle().Colors[imgui.Col.Text],
        slct = imgui.GetStyle().Colors[imgui.Col.ButtonActive]
    }

    if not AI_HEADERBUT then AI_HEADERBUT = {} end
     if not AI_HEADERBUT[str_id] then
        AI_HEADERBUT[str_id] = {
            color = bool and cols.slct or cols.idle,
            clock = os.clock() + duration[1],
            h = {
                state = bool,
                alpha = bool and 1.00 or 0.00,
                clock = os.clock() + duration[2],
            }
        }
    end
    local pool = AI_HEADERBUT[str_id]

    local degrade = function(before, after, start_time, duration)
        local result = before
        local timer = os.clock() - start_time
        if timer >= 0.00 then
            local offs = {
                x = after.x - before.x,
                y = after.y - before.y,
                z = after.z - before.z,
                w = after.w - before.w
            }

            result.x = result.x + ( (offs.x / duration) * timer )
            result.y = result.y + ( (offs.y / duration) * timer )
            result.z = result.z + ( (offs.z / duration) * timer )
            result.w = result.w + ( (offs.w / duration) * timer )
        end
        return result
    end

    local pushFloatTo = function(p1, p2, clock, duration)
        local result = p1
        local timer = os.clock() - clock
        if timer >= 0.00 then
            local offs = p2 - p1
            result = result + ((offs / duration) * timer)
        end
        return result
    end

    local set_alpha = function(color, alpha)
        return imgui.ImVec4(color.x, color.y, color.z, alpha or 1.00)
    end

    imgui.BeginGroup()
        local pos = imgui.GetCursorPos()
        local p = imgui.GetCursorScreenPos()
      
        imgui.TextColored(pool.color, label)
        local s = imgui.GetItemRectSize()
        local hovered = imgui.IsItemHovered()
        local clicked = imgui.IsItemClicked()
      
        if pool.h.state ~= hovered and not bool then
            pool.h.state = hovered
            pool.h.clock = os.clock()
        end
      
        if clicked then
            pool.clock = os.clock()
            result = true
        end

        if os.clock() - pool.clock <= duration[1] then
            pool.color = degrade(
                imgui.ImVec4(pool.color),
                bool and cols.slct or (hovered and cols.hovr or cols.idle),
                pool.clock,
                duration[1]
            )
        else
            pool.color = bool and cols.slct or (hovered and cols.hovr or cols.idle)
        end

        if pool.h.clock ~= nil then
            if os.clock() - pool.h.clock <= duration[2] then
                pool.h.alpha = pushFloatTo(
                    pool.h.alpha,
                    pool.h.state and 1.00 or 0.00,
                    pool.h.clock,
                    duration[2]
                )
            else
                pool.h.alpha = pool.h.state and 1.00 or 0.00
                if not pool.h.state then
                    pool.h.clock = nil
                end
            end

            local max = s.x / 2
            local Y = p.y + s.y + 3
            local mid = p.x + max

            DL:AddLine(imgui.ImVec2(mid, Y), imgui.ImVec2(mid + (max * pool.h.alpha), Y), ToU32(set_alpha(pool.color, pool.h.alpha)), 3)
            DL:AddLine(imgui.ImVec2(mid, Y), imgui.ImVec2(mid - (max * pool.h.alpha), Y), ToU32(set_alpha(pool.color, pool.h.alpha)), 3)
        end

    imgui.EndGroup()
    return result
end

function imgui.Link(label)

    local size = imgui.CalcTextSize(label)
    local p = imgui.GetCursorScreenPos()
    local p2 = imgui.GetCursorPos()
    local result = imgui.InvisibleButton(label, size)

    imgui.SetCursorPos(p2)

    if imgui.IsItemHovered() then

        imgui.TextColored(imgui.ImVec4(0, 1, 1, 1), label)
        imgui.GetWindowDrawList():AddLine(imgui.ImVec2(p.x, p.y + size.y), imgui.ImVec2(p.x + size.x, p.y + size.y), imgui.GetColorU32(0, 1, 0, 1))
    else
        imgui.TextColored(imgui.ImVec4(1, 0.15, 0.2, 1), label)
    end

    return result
end

function imgui.TextQuestion(text)
	local war = u8'Подсказка:'
	if imgui.IsItemHovered() then
		imgui.BeginTooltip()
		imgui.PushTextWrapPos(450)
		imgui.TextColored(imgui.ImVec4(0.00, 0.69, 0.33, 1.00), war)
		imgui.TextUnformatted(text)
		imgui.PopTextWrapPos()
		imgui.EndTooltip()
	end
end

function imgui.TextColoredRGB(string)
    local style = imgui.GetStyle()
    local colors = style.Colors
    local clr = imgui.Col

    local function color_imvec4(color)
        if color:upper() == 'SSSSSS' then return colors[clr.Text] end
        local color = type(color) == 'number' and ('%X'):format(color):upper() or color:upper()
        local rgb = {}
        for i = 1, #color/2 do rgb[#rgb+1] = tonumber(color:sub(2*i-1, 2*i), 16) end
        return imgui.ImVec4(rgb[1]/255, rgb[2]/255, rgb[3]/255, rgb[4] and rgb[4]/255 or colors[clr.Text].w)
    end

    local function render_text(string)
        local text, color = {}, {}
        local m = 1
        while string:find('{......}') do
            local n, k = string:find('{......}')
            text[#text], text[#text+1] = string:sub(m, n-1), string:sub(k+1, #string)
            color[#color+1] = color_imvec4(string:sub(n+1, k-1))
            local t1, t2 = string:sub(1, n-1), string:sub(k+1, #string)
            string = t1..t2
            m = k-7
        end
        if text[0] then
            for i, _ in ipairs(text) do
                imgui.TextColored(color[i] or colors[clr.Text], u8(text[i]))
                imgui.SameLine(nil, 0)
            end
            imgui.NewLine()
        else imgui.Text(u8(string)) end
    end

    render_text(string)
end

function imgui.CenterTextColoredRGB(text)
    local width = imgui.GetWindowWidth()
    local style = imgui.GetStyle()
    local colors = style.Colors
    local ImVec4 = imgui.ImVec4

    local explode_argb = function(argb)
        local a = bit.band(bit.rshift(argb, 24), 0xFF)
        local r = bit.band(bit.rshift(argb, 16), 0xFF)
        local g = bit.band(bit.rshift(argb, 8), 0xFF)
        local b = bit.band(argb, 0xFF)
        return a, r, g, b
    end

    local getcolor = function(color)
        if color:sub(1, 6):upper() == 'SSSSSS' then
            local r, g, b = colors[1].x, colors[1].y, colors[1].z
            local a = tonumber(color:sub(7, 8), 16) or colors[1].w * 255
            return ImVec4(r, g, b, a / 255)
        end
        local color = type(color) == 'string' and tonumber(color, 16) or color
        if type(color) ~= 'number' then return end
        local r, g, b, a = explode_argb(color)
        return imgui.ImColor(r, g, b, a):GetVec4()
    end

    local render_text = function(text_)
        for w in text_:gmatch('[^\r\n]+') do
            local textsize = w:gsub('{.-}', '')
            local text_width = imgui.CalcTextSize(u8(textsize))
            imgui.SetCursorPosX( width / 2 - text_width .x / 2 )
            local text, colors_, m = {}, {}, 1
            w = w:gsub('{(......)}', '{%1FF}')
            while w:find('{........}') do
                local n, k = w:find('{........}')
                local color = getcolor(w:sub(n + 1, k - 1))
                if color then
                    text[#text], text[#text + 1] = w:sub(m, n - 1), w:sub(k + 1, #w)
                    colors_[#colors_ + 1] = color
                    m = n
                end
                w = w:sub(1, n - 1) .. w:sub(k + 1, #w)
            end
            if text[0] then
                for i = 0, #text do
                    imgui.TextColored(colors_[i] or colors[1], u8(text[i]))
                    imgui.SameLine(nil, 0)
                end
                imgui.NewLine()
            else
                imgui.Text(u8(w))
            end
        end
    end
    render_text(text)
end

function themeOne()
    imgui.SwitchContext()
    local style = imgui.GetStyle()
    local colors = style.Colors
    local clr = imgui.Col
    local ImVec4 = imgui.ImVec4

    colors[clr.Text] = ImVec4(0.860, 0.930, 0.890, 0.78)
    colors[clr.TextDisabled] = ImVec4(0.860, 0.930, 0.890, 0.28)
    colors[clr.WindowBg] = ImVec4(0.13, 0.14, 0.17, 1.00)
    colors[clr.ChildBg] = ImVec4(0.13, 0.14, 0.17, 1.00)
    colors[clr.PopupBg] = ImVec4(0.200, 0.220, 0.270, 0.9)
    colors[clr.Border] = ImVec4(0.51, 0.51, 0.51, 0.90)
    colors[clr.BorderShadow] = ImVec4(0.00, 0.00, 0.00, 0.00)
    colors[clr.FrameBg] = ImVec4(0.200, 0.220, 0.270, 1.00)
    colors[clr.FrameBgHovered] = ImVec4(0.455, 0.198, 0.301, 0.78)
    colors[clr.FrameBgActive] = ImVec4(0.455, 0.198, 0.301, 1.00)
    colors[clr.TitleBg] = ImVec4(0.232, 0.201, 0.271, 1.00)
    colors[clr.TitleBgActive] = ImVec4(0.502, 0.075, 0.256, 1.00)
    colors[clr.TitleBgCollapsed] = ImVec4(0.200, 0.220, 0.270, 0.75)
    colors[clr.MenuBarBg] = ImVec4(0.200, 0.220, 0.270, 0.47)
    colors[clr.ScrollbarBg] = ImVec4(0.200, 0.220, 0.270, 1.00)
    colors[clr.ScrollbarGrab] = ImVec4(0.09, 0.15, 0.1, 1.00)
    colors[clr.ScrollbarGrabHovered] = ImVec4(0.455, 0.198, 0.301, 0.78)
    colors[clr.ScrollbarGrabActive] = ImVec4(0.455, 0.198, 0.301, 1.00)
    colors[clr.CheckMark] = ImVec4(0.71, 0.22, 0.27, 1.00)
    colors[clr.SliderGrab] = ImVec4(0.47, 0.77, 0.83, 0.14)
    colors[clr.SliderGrabActive] = ImVec4(0.71, 0.22, 0.27, 1.00)
    colors[clr.Button] = ImVec4(0.455, 0.198, 0.301, 0.76)
    colors[clr.ButtonHovered] = ImVec4(0.455, 0.198, 0.301, 0.86)
    colors[clr.ButtonActive] = ImVec4(0.502, 0.075, 0.256, 1.00)
    colors[clr.Header] = ImVec4(0.455, 0.198, 0.301, 0.76)
    colors[clr.HeaderHovered] = ImVec4(0.455, 0.198, 0.301, 0.86)
    colors[clr.HeaderActive] = ImVec4(0.502, 0.075, 0.256, 1.00)
    colors[clr.ResizeGrip] = ImVec4(0.47, 0.77, 0.83, 0.04)
    colors[clr.ResizeGripHovered] = ImVec4(0.455, 0.198, 0.301, 0.78)
    colors[clr.ResizeGripActive] = ImVec4(0.455, 0.198, 0.301, 1.00)
    colors[clr.PlotLines] = ImVec4(0.860, 0.930, 0.890, 0.63)
    colors[clr.PlotLinesHovered] = ImVec4(0.455, 0.198, 0.301, 1.00)
    colors[clr.PlotHistogram] = ImVec4(0.860, 0.930, 0.890, 0.63)
    colors[clr.PlotHistogramHovered] = ImVec4(0.455, 0.198, 0.301, 1.00)
    colors[clr.TextSelectedBg] = ImVec4(0.455, 0.198, 0.301, 0.43)
    colors[clr.ModalWindowDimBg] = ImVec4(0.200, 0.220, 0.270, 0.73)
end

function themeTwo()
    imgui.SwitchContext()
    local style = imgui.GetStyle()
    local colors = style.Colors
    local clr = imgui.Col
    local ImVec4 = imgui.ImVec4

    colors[clr.Text] = ImVec4(0.80, 0.80, 0.83, 1.00)
    colors[clr.TextDisabled] = ImVec4(0.24, 0.23, 0.29, 1.00)
    colors[clr.WindowBg] = ImVec4(0.06, 0.05, 0.07, 1.00)
    colors[clr.ChildBg] = ImVec4(0.07, 0.07, 0.09, 1.00)
    colors[clr.PopupBg] = ImVec4(0.07, 0.07, 0.09, 1.00)
    colors[clr.Border] = ImVec4(0.80, 0.80, 0.83, 0.88)
    colors[clr.BorderShadow] = ImVec4(0.92, 0.91, 0.88, 0.00)
    colors[clr.FrameBg] = ImVec4(0.10, 0.09, 0.12, 1.00)
    colors[clr.FrameBgHovered] = ImVec4(0.24, 0.23, 0.29, 1.00)
    colors[clr.FrameBgActive] = ImVec4(0.56, 0.56, 0.58, 1.00)
    colors[clr.TitleBg] = ImVec4(0.10, 0.09, 0.12, 1.00)
    colors[clr.TitleBgCollapsed] = ImVec4(1.00, 0.98, 0.95, 0.75)
    colors[clr.TitleBgActive] = ImVec4(0.07, 0.07, 0.09, 1.00)
    colors[clr.MenuBarBg] = ImVec4(0.10, 0.09, 0.12, 1.00)
    colors[clr.ScrollbarBg] = ImVec4(0.10, 0.09, 0.12, 1.00)
    colors[clr.ScrollbarGrab] = ImVec4(0.80, 0.80, 0.83, 0.31)
    colors[clr.ScrollbarGrabHovered] = ImVec4(0.56, 0.56, 0.58, 1.00)
    colors[clr.ScrollbarGrabActive] = ImVec4(0.06, 0.05, 0.07, 1.00)
    colors[clr.CheckMark] = ImVec4(0.80, 0.80, 0.83, 0.31)
    colors[clr.SliderGrab] = ImVec4(0.80, 0.80, 0.83, 0.31)
    colors[clr.SliderGrabActive] = ImVec4(0.06, 0.05, 0.07, 1.00)
    colors[clr.Button] = ImVec4(0.10, 0.09, 0.12, 1.00)
    colors[clr.ButtonHovered] = ImVec4(0.24, 0.23, 0.29, 1.00)
    colors[clr.ButtonActive] = ImVec4(0.56, 0.56, 0.58, 1.00)
    colors[clr.Header] = ImVec4(0.10, 0.09, 0.12, 1.00)
    colors[clr.HeaderHovered] = ImVec4(0.56, 0.56, 0.58, 1.00)
    colors[clr.HeaderActive] = ImVec4(0.06, 0.05, 0.07, 1.00)
    colors[clr.ResizeGrip] = ImVec4(0.00, 0.00, 0.00, 0.00)
    colors[clr.ResizeGripHovered] = ImVec4(0.56, 0.56, 0.58, 1.00)
    colors[clr.ResizeGripActive] = ImVec4(0.06, 0.05, 0.07, 1.00)
    colors[clr.PlotLines] = ImVec4(0.40, 0.39, 0.38, 0.63)
    colors[clr.PlotLinesHovered] = ImVec4(0.25, 1.00, 0.00, 1.00)
    colors[clr.PlotHistogram] = ImVec4(0.40, 0.39, 0.38, 0.63)
    colors[clr.PlotHistogramHovered] = ImVec4(0.25, 1.00, 0.00, 1.00)
    colors[clr.TextSelectedBg] = ImVec4(0.25, 1.00, 0.00, 0.43)
    colors[clr.ModalWindowDimBg] = ImVec4(1.00, 0.98, 0.95, 0.73)
end

function themeThree()
    imgui.SwitchContext()
    local style = imgui.GetStyle()
    local colors = style.Colors
    local clr = imgui.Col
    local ImVec4 = imgui.ImVec4
  
    colors[clr.FrameBg]                = ImVec4(0.46, 0.11, 0.29, 1.00)
    colors[clr.FrameBgHovered]         = ImVec4(0.69, 0.16, 0.43, 1.00)
    colors[clr.FrameBgActive]          = ImVec4(0.58, 0.10, 0.35, 1.00)
    colors[clr.TitleBg]                = ImVec4(0.61, 0.16, 0.39, 1.00)
    colors[clr.TitleBgActive]          = ImVec4(0.61, 0.16, 0.39, 1.00)
    colors[clr.TitleBgCollapsed]       = ImVec4(0.61, 0.16, 0.39, 1.00)
    colors[clr.CheckMark]              = ImVec4(0.94, 0.30, 0.63, 1.00)
    colors[clr.SliderGrab]             = ImVec4(0.85, 0.11, 0.49, 1.00)
    colors[clr.SliderGrabActive]       = ImVec4(0.89, 0.24, 0.58, 1.00)
    colors[clr.Button]                 = ImVec4(0.46, 0.11, 0.29, 1.00)
    colors[clr.ButtonHovered]          = ImVec4(0.69, 0.17, 0.43, 1.00)
    colors[clr.ButtonActive]           = ImVec4(0.59, 0.10, 0.35, 1.00)
    colors[clr.Header]                 = ImVec4(0.46, 0.11, 0.29, 1.00)
    colors[clr.HeaderHovered]          = ImVec4(0.69, 0.16, 0.43, 1.00)
    colors[clr.HeaderActive]           = ImVec4(0.58, 0.10, 0.35, 1.00)
    colors[clr.Separator]              = ImVec4(0.69, 0.16, 0.43, 1.00)
    colors[clr.SeparatorHovered]       = ImVec4(0.58, 0.10, 0.35, 1.00)
    colors[clr.SeparatorActive]        = ImVec4(0.58, 0.10, 0.35, 1.00)
    colors[clr.ResizeGrip]             = ImVec4(0.46, 0.11, 0.29, 0.70)
    colors[clr.ResizeGripHovered]      = ImVec4(0.69, 0.16, 0.43, 0.67)
    colors[clr.ResizeGripActive]       = ImVec4(0.70, 0.13, 0.42, 1.00)
    colors[clr.TextSelectedBg]         = ImVec4(1.00, 0.78, 0.90, 0.35)
    colors[clr.Text]                   = ImVec4(1.00, 1.00, 1.00, 1.00)
    colors[clr.TextDisabled]           = ImVec4(0.60, 0.19, 0.40, 1.00)
    colors[clr.WindowBg]               = ImVec4(0.06, 0.06, 0.06, 0.94)
    colors[clr.ChildBg]                = ImVec4(1.00, 1.00, 1.00, 0.00)
    colors[clr.PopupBg]                = ImVec4(0.08, 0.08, 0.08, 0.94)
    colors[clr.Border]                 = ImVec4(0.49, 0.14, 0.31, 1.00)
    colors[clr.BorderShadow]           = ImVec4(0.49, 0.14, 0.31, 0.00)
    colors[clr.MenuBarBg]              = ImVec4(0.15, 0.15, 0.15, 1.00)
    colors[clr.ScrollbarBg]            = ImVec4(0.02, 0.02, 0.02, 0.53)
    colors[clr.ScrollbarGrab]          = ImVec4(0.31, 0.31, 0.31, 1.00)
    colors[clr.ScrollbarGrabHovered]   = ImVec4(0.41, 0.41, 0.41, 1.00)
    colors[clr.ScrollbarGrabActive]    = ImVec4(0.51, 0.51, 0.51, 1.00)
end

function themeFour()
    imgui.SwitchContext()
    local style = imgui.GetStyle()
    local colors = style.Colors
    local clr = imgui.Col
    local ImVec4 = imgui.ImVec4
    
    colors[clr.Text]                   = ImVec4(0.90, 0.90, 0.90, 1.00)
    colors[clr.TextDisabled]           = ImVec4(0.60, 0.60, 0.60, 1.00)
    colors[clr.WindowBg]               = ImVec4(0.08, 0.08, 0.08, 1.00)
    colors[clr.ChildBg]                = ImVec4(0.10, 0.10, 0.10, 1.00)
    colors[clr.PopupBg]                = ImVec4(0.08, 0.08, 0.08, 1.00)
    colors[clr.Border]                 = ImVec4(0.70, 0.70, 0.70, 0.40)
    colors[clr.BorderShadow]           = ImVec4(0.00, 0.00, 0.00, 0.00)
    colors[clr.FrameBg]                = ImVec4(0.15, 0.15, 0.15, 1.00)
    colors[clr.FrameBgHovered]         = ImVec4(0.19, 0.19, 0.19, 0.71)
    colors[clr.FrameBgActive]          = ImVec4(0.34, 0.34, 0.34, 0.79)
    colors[clr.TitleBg]                = ImVec4(0.00, 0.69, 0.33, 0.80)
    colors[clr.TitleBgActive]          = ImVec4(0.00, 0.74, 0.36, 1.00)
    colors[clr.TitleBgCollapsed]       = ImVec4(0.00, 0.69, 0.33, 0.50)
    colors[clr.MenuBarBg]              = ImVec4(0.00, 0.80, 0.38, 1.00)
    colors[clr.ScrollbarBg]            = ImVec4(0.16, 0.16, 0.16, 1.00)
    colors[clr.ScrollbarGrab]          = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.ScrollbarGrabHovered]   = ImVec4(0.00, 0.82, 0.39, 1.00)
    colors[clr.ScrollbarGrabActive]    = ImVec4(0.00, 1.00, 0.48, 1.00)
    colors[clr.CheckMark]              = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.SliderGrab]             = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.SliderGrabActive]       = ImVec4(0.00, 0.77, 0.37, 1.00)
    colors[clr.Button]                 = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.ButtonHovered]          = ImVec4(0.00, 0.82, 0.39, 1.00)
    colors[clr.ButtonActive]           = ImVec4(0.00, 0.87, 0.42, 1.00)
    colors[clr.Header]                 = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.HeaderHovered]          = ImVec4(0.00, 0.76, 0.37, 0.57)
    colors[clr.HeaderActive]           = ImVec4(0.00, 0.88, 0.42, 0.89)
    colors[clr.Separator]              = ImVec4(1.00, 1.00, 1.00, 0.40)
    colors[clr.SeparatorHovered]       = ImVec4(1.00, 1.00, 1.00, 0.60)
    colors[clr.SeparatorActive]        = ImVec4(1.00, 1.00, 1.00, 0.80)
    colors[clr.ResizeGrip]             = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.ResizeGripHovered]      = ImVec4(0.00, 0.76, 0.37, 1.00)
    colors[clr.ResizeGripActive]       = ImVec4(0.00, 0.86, 0.41, 1.00)
    colors[clr.PlotLines]              = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.PlotLinesHovered]       = ImVec4(0.00, 0.74, 0.36, 1.00)
    colors[clr.PlotHistogram]          = ImVec4(0.00, 0.69, 0.33, 1.00)
    colors[clr.PlotHistogramHovered]   = ImVec4(0.00, 0.80, 0.38, 1.00)
    colors[clr.TextSelectedBg]         = ImVec4(0.00, 0.69, 0.33, 0.72)
end

imgui.OnInitialize(function()
    imgui.GetIO().IniFilename = nil
    local style = imgui.GetStyle()
    local colors = style.Colors
    local clr = imgui.Col
    local ImVec4 = imgui.ImVec4
    local ImVec2 = imgui.ImVec2

    menuLogo = imgui.CreateTextureFromFileInMemory(imgui.new('const char*', logo), #logo)

    local config = imgui.ImFontConfig()
    config.MergeMode = true
    local glyph_ranges = imgui.GetIO().Fonts:GetGlyphRangesCyrillic()
    local iconRanges = imgui.new.ImWchar[3](faicons.min_range, faicons.max_range, 0)
    imgui.GetIO().Fonts:AddFontFromFileTTF('trebucbd.ttf', 14.0, nil, glyph_ranges)
    icon = imgui.GetIO().Fonts:AddFontFromFileTTF('moonloader/resource/fonts/fa-solid-900.ttf', 14.0, config, iconRanges)
 
    if font24 == nil then
        font24 = imgui.GetIO().Fonts:AddFontFromFileTTF(getFolderPath(0x14) .. '\\trebucbd.ttf', 24.0, nil, imgui.GetIO().Fonts:GetGlyphRangesCyrillic())
    end
    if font20 == nil then
        font20 = imgui.GetIO().Fonts:AddFontFromFileTTF(getFolderPath(0x14) .. '\\trebucbd.ttf', 20.0, nil, imgui.GetIO().Fonts:GetGlyphRangesCyrillic())
    end
    if font18 == nil then
        font18 = imgui.GetIO().Fonts:AddFontFromFileTTF(getFolderPath(0x14) .. '\\trebucbd.ttf', 18.0, nil, imgui.GetIO().Fonts:GetGlyphRangesCyrillic())
    end

    local config = imgui.ImFontConfig()
    config.MergeMode = true
    local glyph_ranges = imgui.GetIO().Fonts:GetGlyphRangesCyrillic()
    local iconRanges = imgui.new.ImWchar[3](faicons.min_range, faicons.max_range, 0)
    imgui.GetIO().Fonts:AddFontFromFileTTF('trebucbd.ttf', 18.0, nil, glyph_ranges)
    icon = imgui.GetIO().Fonts:AddFontFromFileTTF('moonloader/resource/fonts/fa-solid-900.ttf', 18.0, config, iconRanges)

    style.WindowPadding = ImVec2(15, 15)
    style.WindowRounding = 15.0
    style.FramePadding = ImVec2(5, 5)
    style.ItemSpacing = ImVec2(12, 8)
    style.ItemInnerSpacing = ImVec2(8, 6)
    style.IndentSpacing = 25.0
    style.ScrollbarSize = 15.0
    style.ScrollbarRounding = 15.0
    style.GrabMinSize = 15.0
    style.GrabRounding = 7.0
    style.ChildRounding = 15.0
    style.FrameRounding = 6.0
    style.WindowTitleAlign = ImVec2(0.5, 0.5)
	style.ButtonTextAlign = ImVec2(0.5, 0.5)

    themeOne()
end)

logo ="\x89\x50\x4E\x47\x0D\x0A\x1A\x0A\x00\x00\x00\x0D\x49\x48\x44\x52\x00\x00\x02\x58\x00\x00\x01\x2C\x08\x06\x00\x00\x00\x1F\x3D\xCD\x96\x00\x00\x00\x01\x73\x52\x47\x42\x00\xAE\xCE\x1C\xE9\x00\x00\x20\x00\x49\x44\x41\x54\x78\x5E\xED\x9D\xBD\xAE\x35\xC9\x75\x9E\xCF\xFC\x79\x46\x10\x0C\x92\x81\x39\x13\x18\x43\xC9\x36\x47\xA4\x60\x61\x26\x30\x33\x27\x04\x0C\x70\x00\x27\x4A\x15\x71\x6E\xC1\x11\x79\x09\x56\x64\x5F\x82\x32\xA5\x4A\x0C\x50\x80\x01\x26\xCE\xE4\x80\x82\x0C\x53\x1E\xC1\xBF\x50\x40\xC9\xC1\x48\x30\x04\x91\x22\xC5\x31\xEA\xDB\x2C\xEE\x3A\x75\xAA\xBB\xD6\xAA\x7A\xAB\xBA\xBA\xF7\x73\x92\x21\xBF\xDD\x5D\xB5\xD6\xB3\x7E\xEA\xED\xEA\xDE\xBD\x5F\x7B\xE2\x0F\x02\x10\x80\x00\x04\x20\x00\x01\x08\x40\x40\x4A\xE0\x35\xE9\x68\x0C\x06\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\xF0\x84\xC0\x22\x09\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x80\x88\xC0\x4F\x7F\xF5\xB7\x3F\x6F\x19\xEA\xAD\xBF\xF9\x83\xA5\x7B\xF1\x55\xFD\x6A\x89\x55\xCF\x39\x70\xEC\xA1\x77\xBE\x73\x97\x2E\xEA\xF3\xE1\xC4\x62\x08\x40\xE0\x51\x08\xB4\x2E\x96\x56\x3E\x47\x89\xAE\xAB\xFA\x65\xE5\xAE\x3A\x0E\x8E\x2A\x92\xE7\x1D\x07\x81\x55\x89\x9D\xA7\x48\x8E\x6A\x88\xE7\x4D\xBF\x75\x2D\xCF\xE3\x4E\x6C\xDB\x62\x75\xC5\xFA\xF1\xF8\xD4\x46\xED\xE5\x59\x33\xF2\xEF\xAA\x7E\xA9\x62\x60\x1D\x07\x8E\x56\x52\xD7\x3F\x0E\x81\x95\xC5\x78\x64\x71\xCC\x68\x92\xD7\x4F\x59\xBD\x87\xBD\x31\x27\xAE\xF7\x98\xF4\xB2\xDC\x8B\xEE\x91\x9C\x47\xFA\xE5\xC9\x68\x35\x83\xAB\xFA\xE5\x61\xAA\x38\x16\x8E\x7E\x8A\xA3\x99\xA9\x6B\xC5\xEF\xE1\xD3\x13\x02\xEB\xE9\xE9\x69\x74\xA0\xB7\x02\xA3\x4C\x00\x8F\x0F\x2D\xF3\x7A\xC6\xCF\xFD\x6D\x99\xAF\x25\x99\x3D\xE7\xF4\xF8\x53\x9B\x67\x45\x7F\x6B\x36\xF7\x7C\x3E\x92\xE5\xD1\x82\xEB\x28\xDF\x6A\xF1\xE8\xCD\xB1\xB3\xFB\xE5\xB1\xBF\x97\xD5\x5E\x2C\x3C\x76\xD4\x62\xAA\xFC\x7C\xA4\xCF\xF0\xB0\x47\xEA\xA1\x05\xD6\x6A\xC5\xE1\x2D\x0A\x95\xFD\x5B\xF3\xAA\xC6\x2F\xA5\xA3\xD7\x57\x7B\x4A\xEF\x1F\x39\xD2\xA7\x95\xFC\x54\xF1\x3A\x53\x33\x55\xE7\xD4\xEC\x5C\x69\x89\x59\x8B\xCF\x67\xF5\x4B\x65\x77\x0B\xB3\x52\x6C\x54\xF6\xB4\xC4\xDD\x7A\x8E\xCA\xD7\x30\xDF\x19\xFC\xB5\x70\x51\x32\xA9\xCD\xF7\x90\x02\xEB\x2C\x89\x72\x84\xF0\xA9\x25\xCC\xA8\xCF\x67\x24\xFD\xD1\x71\x9F\xE1\xE3\xA8\xF8\xA4\xE3\x1E\xCD\xD1\xEA\x63\x2B\xEF\xB3\xF8\x97\x72\xB0\xF8\x7A\x56\xBF\x46\xDB\x6D\x61\x77\xC6\xFC\xF7\xE6\xC7\x95\x44\x54\xAD\x47\x78\x63\x5E\x1B\x6F\xEB\xF3\x87\x13\x58\xA3\x8B\xB5\x35\x10\xB5\xF3\x42\x42\x9C\xD5\xF6\x9A\x6F\xA3\x77\x7E\x56\xE4\x36\xAB\xC0\x5B\xD8\x9F\x69\xD7\xCA\xEA\x9F\x95\xB7\x22\x57\x3E\xFA\xF5\x3F\xB7\x9A\xF5\xEA\xB8\x1F\xFC\xCF\x7F\xEC\x3A\x7E\xEF\xE0\x91\x17\x65\x47\xFA\x25\x03\xB4\x33\x90\x25\x47\xAE\x90\x1F\x0A\x1F\x66\xC4\x63\xC6\x1C\x96\x98\xF7\xD8\xF1\x30\x02\x8B\xA4\xEA\x49\x93\x63\xCF\xED\x29\x82\x33\xC4\xBD\xC7\xBF\x59\x91\x39\x03\x47\x0B\x8B\x11\x02\xC4\x2B\x3C\x6A\x76\x2A\x04\x57\xF4\xB3\x27\x6E\x2B\xFA\x55\x63\xA7\xF8\xBC\x94\x23\x70\x54\x90\x5D\x73\x8C\x91\xFD\xF7\x21\x04\x56\x4F\x71\x84\x94\xB0\x34\x1A\x45\x53\x5C\x33\xFD\xD6\xB1\xCA\x5B\x08\xCA\xB8\xCF\x88\xAF\xD7\xBF\x59\x91\x51\x72\xDC\xB2\x79\x06\xDF\x74\xEE\x94\x75\xAB\x7F\x96\xBE\xD0\x1B\xA3\xD9\x5C\xAC\xFD\xEE\x8C\x7E\x79\x6D\xEE\x15\xA9\x57\xCD\x0F\x2F\xC7\x33\x1C\x3F\xAA\xF7\x5E\x5E\x60\xB5\x34\xCF\x11\x85\x71\x44\xA3\x3C\x43\x62\xB7\xD8\x68\x29\x86\x59\x71\x1F\x15\x57\x8B\x8F\x2D\xEC\xBC\xE7\xCC\xE2\x58\xB3\x6B\x14\xE7\xDA\xBC\xA5\xCF\x47\xF4\x87\x9A\x1D\x33\xFC\xBF\xAA\x5F\x35\xB6\xEA\xCF\xE1\x68\x27\x3A\x8A\x55\x4B\xBD\x8C\xE8\xB9\x97\x16\x58\xDE\xC5\x61\x54\xB0\x4B\xE9\xD6\x92\x00\x96\xB4\xAD\xF9\xD0\x3B\x6F\x6D\xFC\x99\xBE\xAA\x6E\xF7\xB4\xF8\x34\xC3\xCF\x11\x05\x6F\xC9\xA1\x78\xCC\x23\xD6\xCF\x1E\x1F\x55\x9E\x78\x62\x90\x1F\xDB\x5B\xBF\xAB\x08\x46\x95\x5F\xB5\x98\x8C\xE0\xB5\x15\xBF\x9A\x2D\x3D\x71\xB7\x9E\x3B\xD3\xDF\x95\x39\x44\xDB\xBC\x3C\xD4\x3D\xF7\xB2\x02\x6B\xE5\xC5\x41\xBD\x38\xF7\x14\xB6\x35\x01\x7B\xE6\x50\x35\xD3\xAD\x82\x6E\xBD\xDD\xA3\xF4\x49\x1D\xD3\x74\x3C\x75\xD1\x5B\x9A\xF5\x23\xD5\x8F\x85\xC7\xE8\x5C\xB1\xD8\x90\x1E\x63\xAD\xDB\xDA\xB8\x67\xF4\xAB\xC7\x66\x15\xB7\x9C\x6B\x8F\x4D\xB5\x18\xB5\x7C\xFE\x28\x7E\x5A\xD9\x78\x78\x28\xFB\x2D\x02\xCB\xF8\x8C\x95\x35\x90\x8A\xE3\x3C\xC9\xA0\x2C\xEC\xD2\xBC\xCA\xF1\xB7\xD8\x78\xFC\xDD\x13\x59\x1E\x51\x30\xC3\x2F\xF5\x82\xA8\x2C\xFC\x5A\x9E\xAE\xCC\xB2\x66\xBB\x22\x9F\xE2\x1C\xB3\xF3\xA4\xE6\x9B\xEA\x62\xE5\xAC\x7E\x29\xED\x56\xE4\x89\xD2\x1E\x6F\xEC\x2D\xC7\x7B\x7D\x5C\xDD\x1F\x8B\xCF\x8A\x75\x46\xD5\x6B\x2F\x29\xB0\xAC\x8B\xC3\x19\x92\x69\xAF\x40\x46\xD9\x1F\xE7\x1C\x35\xFE\x5E\x91\x78\x1B\x42\x4B\xC1\x1D\xE1\x57\xEB\x96\x75\xEE\x9F\xAA\xF0\xF7\xB8\x3D\x4A\xFD\xD4\x72\xE7\xC8\x3C\xA9\xD9\xD6\x23\xDE\xCF\xEA\xD7\x28\xBB\x5B\x7B\xCE\x28\x7B\x3C\xB1\xB7\x1C\x7B\xD4\x85\xB3\xC5\xB6\xD9\xC7\x58\x63\xAD\xEA\xB3\x97\x13\x58\x57\x5A\x1C\xF6\x9A\xE8\x59\x8A\xBB\xA7\x80\xAC\xC5\xE0\x99\x63\x25\x6E\xAD\xFE\xA9\x8A\xBF\xC4\xED\x51\xEA\xA7\x96\x33\x2B\xE5\x49\xCD\x56\x8F\x78\x3F\xAB\x5F\x33\xEC\xF6\xD4\xE3\x0C\x7B\xAC\x71\xE7\x38\x1F\x01\x6B\x9C\x15\x7D\x16\x81\xE5\x8B\xCD\xA1\x47\x1F\xB9\xB3\x74\xA4\xE3\xD6\x82\xA8\xD9\xB8\x6A\x53\x6C\xF1\x4F\x51\xFC\x8F\x24\xB0\x82\xAF\x56\xCE\xAB\xE6\x49\x2D\xBF\x6B\x3E\x9E\xD9\x2F\x8B\xEF\xAA\x63\x6A\x79\x02\x47\x15\xE9\xE3\xC6\xA9\xC5\x38\x5A\xD6\xDB\x67\x2F\x25\xB0\xAE\x7A\xF5\x7D\x5C\x1A\xAE\x35\xB3\xB5\x28\x4A\x56\x9F\xA1\x29\x7A\xFD\xEB\x2D\xFE\x9C\xD3\x23\xD4\x4F\x8D\xB1\x2A\x4F\xFE\xCB\x9F\xFC\x91\xA9\x78\xFE\xF9\x6F\x7D\xC3\x74\x9C\xF7\xA0\xDC\xCF\xAB\xF8\xE5\xE5\xD0\x73\xFC\xC8\x5B\x6B\x47\xE7\x47\x0F\x97\xAB\x9C\x5B\xEB\x05\xC1\xCF\xDE\x1E\x7B\x19\x81\xF5\x08\x8B\xC3\x55\x12\xBB\xC7\x0F\x4B\x51\x9C\x55\x60\x79\x6E\xF5\xA8\xAE\xB0\xE2\x38\x8F\x54\x3F\x5B\x39\xD4\x2B\x42\xAC\x8B\xE6\x56\xFE\xAB\xC5\x96\x6A\xC7\x7B\x35\xBF\x7A\xFA\x87\xF7\xDC\x34\x57\xAE\x96\x1F\x5E\x16\x57\x3B\xDE\xBA\x96\xF4\x88\x2C\x04\x96\x31\x6B\x6A\x4D\x46\xDD\x1C\x8D\x66\x3D\xE4\x61\xD6\xC2\x88\x70\x7A\x1A\x63\x8C\xFB\xEC\xF8\x5A\x7D\xEC\x29\xFE\x34\x79\x46\x0B\xAC\xD5\xEA\x67\xA5\x85\xB3\x54\xC4\xB3\xF3\xAD\x64\x43\x2D\x66\x2D\xCD\x67\x05\xBF\x5A\xEC\xEE\x39\x07\x8E\x3D\xF4\xC6\x9E\x3B\xBA\xCF\x5E\x42\x60\x8D\x5C\x1C\x7A\x8B\xE3\x11\x1B\xCA\xD8\x92\xB8\x8D\x6E\x2D\x8C\x16\x71\x65\x89\xF9\x8C\xB8\x5A\x7D\xEC\x15\x59\x8F\x5A\x3F\x81\x6F\x4B\x7E\xA4\xF9\x6D\xC9\x95\x9E\x7A\x98\x91\x67\xB3\xC4\x55\x3A\xCF\x51\x7E\xF5\xC4\xA2\xE5\xDC\xAB\xE6\x47\x0B\x8B\xAD\x73\x94\x8C\xBC\x79\x35\xBA\xC7\x22\xB0\x76\x32\x45\x19\xF8\xD9\xCD\xA5\x64\xBB\x37\xF9\xF6\x8A\xC8\xCA\x46\x39\x67\x6E\x8F\xA5\x38\xBC\x0B\xA8\xD5\xAF\xDC\x96\x51\x7E\x5A\x7C\x0C\xB6\xF4\x88\xAC\x51\x02\xAB\x95\x65\xAD\x79\xAB\x58\xF7\x08\xAC\x51\xBE\x6D\xF9\xAE\xF2\xB9\xC6\xF6\xAC\x7E\x8D\xEE\x77\x35\x6E\xF9\xE7\x67\xE5\xE8\xF5\xF3\x08\x71\x5E\xB3\xD1\x5B\x2B\x23\x7B\xEC\xE9\x05\xD6\xD9\x16\x87\x19\x0B\xB3\xA5\xB8\xBD\x49\xA8\xBA\x6A\xEF\x99\xB7\x54\x58\x7B\xC5\x31\x4B\x5C\x8D\x8C\xE9\xC8\xE2\x0F\x76\x53\x3F\xB5\x76\xFD\xF2\x73\x4B\x7D\xF9\x47\xAD\x9F\xA1\xAE\x9D\xA3\x45\x41\x9C\xBF\xD7\x2F\x4B\x3C\x7A\xE7\xA8\x47\xE7\x7E\x84\xC5\x1E\xCF\x78\xD6\x63\x67\xF9\x78\x94\x7F\x56\x0E\xE1\x38\x0F\x8B\x91\x3D\xF6\x21\x04\xD6\x51\x0B\xAD\x27\x21\xBC\x49\xA1\xD8\x5D\x6A\x6D\x70\xAA\x02\xF3\x14\xC1\x9E\xBF\x8A\x87\x96\x55\x3E\x8D\x10\x5B\x23\x1B\x80\x45\x60\x3D\x5A\xFD\x28\x6B\xCB\xDB\x03\x2C\xC7\xAB\xEA\x46\x75\xD1\x64\xB1\xD9\x72\x4C\xAB\x5F\xDE\xDA\x6D\x9D\xC7\xE2\x83\xD7\x16\xCB\x98\xDE\x63\x7A\xFD\x5B\xC1\x07\xAF\xCF\xA5\xE3\x3D\x1C\x2C\x3D\xB6\xE5\x2E\xC1\xA9\x05\x96\x65\x71\x08\xE0\x3D\x0B\xC4\x0A\xC9\xE5\x49\x0C\xE5\x55\xA8\x75\xDE\x11\x8C\xAC\x73\x97\x0A\x49\xF1\x75\xEA\x11\x3E\xA5\xB6\xAA\xFD\x2B\x71\xF0\x36\x00\xEA\xC7\xD7\xC6\x47\xE7\x88\xC7\x9A\x9E\x7C\x52\xF6\x0C\x8F\xCD\x96\x63\xBD\x7E\xF5\xC4\xC4\x3B\x57\xCD\xFE\x1E\x5B\x6A\x63\x7B\x3F\xB7\xF8\xB6\x92\xBD\x5E\xFF\x2C\xC7\x5B\x18\xC4\x71\x2C\x02\x2B\x1C\xEB\xED\xB1\x97\x17\x58\x1E\x71\x15\x00\xAE\x92\x74\x9E\xE4\x50\x5F\x89\xEE\xCD\x3D\x83\x4F\x8B\xEF\x3D\xEF\xFD\x99\xE1\x53\xAF\xD8\xB2\x34\x00\x6F\xF1\x5B\x04\xD6\xA3\xD5\xCF\x56\xE3\x9E\x9D\x23\x96\x05\x24\x1C\xD3\x52\x2B\xEA\x7E\x61\xB5\xD5\x73\x9C\xD5\x2F\x45\x5C\xAC\x73\xED\xD9\xAF\xB0\xC3\xC3\xC7\x7A\x6C\xEA\xDB\xAA\x36\x5A\x7D\x69\x39\xCE\x13\xDB\x11\x3D\xF6\xB4\x02\xCB\xB2\x38\x9C\x71\xF7\x2A\x26\x91\x27\x31\x46\x34\xCC\xAD\xF9\x67\x15\xA9\xD7\xFF\xD6\xAF\xDD\xCF\xF2\x27\x6F\x0E\x3D\xFE\xED\x35\x1A\xAB\xC8\xA2\x7E\xEC\xED\xFA\xA8\x1C\xB1\x5A\xE8\xCD\xA5\x38\xEE\x15\xFC\x52\xF9\xD0\xCA\x70\xA5\x8B\x72\x6B\xBE\x3C\xD2\x71\x9E\xB8\x5A\x04\x96\x77\x17\xEB\xD2\x02\xEB\xAC\x57\xDF\xAD\x22\x4B\xD5\x6C\xF6\x76\x5B\x46\xCC\xB1\x55\xF0\xAD\xC5\xE1\x89\xFB\x4C\x7F\x4A\x7E\x5A\x7D\x54\x17\xBF\x45\x60\x79\x38\xAE\xB8\xD0\x58\xD9\x9E\x71\x67\xA2\x57\xB0\x1F\x9D\xF7\xD6\x45\x7E\xF6\x6E\xBA\x37\x67\xCE\xC2\xD1\xCA\xFB\x8A\xC7\x59\x63\xAA\xEE\xB1\x81\xE5\x29\x05\x96\x65\x71\x38\xF3\xEE\xD5\x4A\x02\x2B\xD8\x72\xE4\x36\xB3\xB5\x38\x82\x9D\xDE\xAF\xDD\xAF\xD0\x1C\xAD\xFE\x29\x8B\x9F\xFA\xB1\x2D\x23\x2B\xE4\x87\xCD\xD2\xDB\x51\xD6\x5C\xBA\x8A\x5F\xA3\xFC\xB8\x2A\x47\x4F\x2E\x5D\xE9\x58\x6B\x3C\xE3\x1A\x52\xF3\xDD\x7A\x97\xE0\xD2\x02\xEB\xEC\x57\xDF\x9E\x86\x39\x7A\xCB\x1F\x81\x55\x2B\xB9\xBE\xCF\xAD\x0D\xC0\x22\xB2\x2C\xC5\x6F\x11\x58\x8F\x58\x3F\x69\x14\x47\x2D\xDE\x7D\x99\xB2\x7F\xB6\x25\x8F\xAE\xE4\xD7\x28\x5F\xAE\xCA\x71\x64\xEE\xAD\x3C\xB6\x25\x9E\xD1\x7E\x55\x8F\x8D\xE3\x9D\x6E\x07\xCB\xB2\x38\x5C\x61\xF7\x6A\x25\x81\x95\xDA\x32\xAA\xA9\xED\x15\xA8\xA7\x40\xAC\x85\x7E\x84\x1F\x5B\xB6\x59\xFD\x53\x14\x3F\xF5\x53\xCF\x90\x95\x72\xA3\x6E\xED\xF3\x23\x66\xDF\x52\xF3\xDA\xD7\x7A\x7C\xC9\xAF\x91\x71\xBA\x2A\xC7\x56\xFE\x67\x3F\x4F\xD9\x63\x03\x0B\xCB\x85\xEC\x29\x77\xB0\x2C\x0B\x84\xE7\xEA\x7B\x64\x91\xF6\x24\xA5\x35\x21\x66\x5C\x75\x47\x5B\x8E\x62\xD5\xC2\xA2\xC6\xFE\x28\x5F\x72\xBB\xAC\xBE\xFD\xEF\xFF\xFA\xC7\x4F\x9F\xFD\xCA\xBF\xAE\xB9\x55\x2D\x7C\xEA\x67\x1F\xE1\x2A\x79\x51\x0D\xF4\xC6\x01\x5B\xF9\x74\x45\xBF\x46\xF9\x84\xB8\x6A\xCD\xBE\x75\xCF\xB3\xF6\x59\xCB\x45\xEC\x65\x05\x96\x65\x71\x60\xF7\x4A\x9F\xE4\x57\x13\x58\xA3\x1A\x73\x0B\x79\x6B\xE1\xFF\xE4\x87\x7F\xFA\xF4\xC3\x77\xFE\x95\x69\x8A\xAD\xAB\x2B\xEA\xA7\x8E\x6F\xA5\xDC\xA8\x5B\x5B\x3E\x62\xF6\x6E\x4F\xAB\x9D\xDE\xF3\x66\x3D\xAA\x80\xC0\xF2\x46\x66\xFD\xE3\xAD\x7D\x16\x81\x55\x89\xE5\x15\x76\xAF\x82\x8B\xD6\x84\x88\x38\x46\x2E\x0C\x47\x0B\xAC\x16\x1E\x7B\x69\x32\x92\x95\xB7\xD5\x58\xE3\xFC\xA5\x3F\xFD\x5F\x4F\xDF\x7F\xFB\x5F\x9A\x86\xEF\x11\x58\x8F\x5A\x3F\x01\xEC\x4A\x79\x61\x0A\xB4\x71\x17\xEB\x8A\x7E\x8D\xF4\xE9\xAA\xBB\x80\x3D\x39\x75\xF6\x73\xAD\x7D\xF6\x61\x05\xD6\x23\x5D\x7D\xB7\x08\x8A\x19\x0D\x67\xE4\x1C\xB5\x02\xB6\x16\x48\x6D\x9C\x23\x7D\x28\xD9\x66\xF5\xEB\xEB\xFF\xED\x47\x4F\xBF\xFF\x0F\xFE\x45\xCD\xBD\xCD\x5B\x84\xD4\xCF\x3E\xBA\x23\xF2\x22\xC4\x7E\xC4\xBC\xB3\x76\x7A\xB6\x88\x9E\xDD\xAF\x55\x76\x00\x47\x71\xAC\x36\x91\x8B\x1D\x60\xED\xB1\xC1\x6D\x04\xD6\x4E\xF0\x3D\x57\xDF\xAB\x5F\xB1\x7A\x92\x62\xB4\x2F\x57\xDA\xC1\x1A\xB1\xA0\xB5\xF6\x23\x4F\x8C\xBF\xF9\xE9\x67\x4F\xFF\xEE\xAD\xDF\xAA\x4E\x35\x6B\xF7\x6A\x74\xCE\x55\x1D\xAD\x1C\xE0\x61\x3B\x3B\x27\x72\xDB\xD4\xF3\x1F\x55\xAF\xB3\xFC\x1A\x9D\x7B\xA3\xFD\xA8\xE5\xF6\xE8\xF9\xAF\x24\xDC\x3C\x75\x5E\xE3\xFE\xB0\x02\xEB\xD1\xAE\xBE\x57\xDA\xC1\x3A\xFA\x6A\x38\x16\x85\xA2\x90\xD4\x0B\x99\xA5\x60\xF7\x8E\xB1\xFA\x14\x1E\x70\xFF\xEE\x5B\x1F\x3C\x7D\xE7\xCD\xAF\x56\xA7\x2C\x09\x2C\xEA\x67\x9D\xDD\xAB\x19\xBB\x23\x47\x08\xAC\x99\x7E\x8D\x14\x58\x33\xFC\xF0\xF6\x04\x75\xDF\x3A\x8B\xC0\xB2\xF6\xC7\x6A\x53\x74\x1C\xF0\x90\x3B\x58\x96\x05\xE2\xE8\xDD\x2B\x75\xD2\x7A\x92\x4B\x5D\x80\x69\x3E\x1E\xD1\xAC\x7B\x6E\xA5\xED\xD5\xD2\x48\x4E\x8E\x1A\xFE\xE5\xA1\xD6\x18\x87\x07\xDC\xBF\xF3\xE6\x07\x4F\x9F\xBC\xF9\x7E\x75\x9A\x56\x81\xF5\xA8\xF5\x33\x33\x27\xB6\xE2\xAD\xB6\x41\xDD\x8B\x6A\x49\x37\xD3\xAF\x91\xE2\xAA\x74\x61\xAB\x8E\x8D\x57\x5C\x8D\xF0\x77\x95\x9E\xDE\xC2\xA2\x96\x8B\x3D\x9F\x5B\xBF\xA9\x1D\xE6\xB8\xCC\x6B\x1A\x2C\xE2\x2A\x38\xEC\x59\x20\x46\x14\x8D\xBA\xA9\x59\x17\xDF\x11\x05\x78\x45\x81\x35\x22\xE6\x3D\xC5\xEC\x89\x6F\x78\xC0\x3D\x08\xAC\x8F\xDF\xF8\x72\x75\xCA\xBC\xF0\xA9\x9F\x35\x76\xAF\xF6\xE2\xAD\xCE\x4D\x75\x2F\x6A\x5D\x08\x47\xF8\x35\xAB\xDF\x45\x9F\xD5\x3E\x6C\xB1\x9C\x9D\x1F\xB3\xFD\xAB\x36\xAE\xEC\x00\x4F\x7F\xF4\x8E\xBD\x75\xBC\xE2\x9B\xDA\xF9\xD8\xCB\xBF\x68\xD4\xB2\x40\x78\xC4\xD5\x88\x02\x1D\x71\x45\xE0\x49\xB0\x51\x4D\x60\x95\xDB\x83\xA5\x2B\x4B\x4F\x51\x8D\xE2\xE3\xB1\x21\x3F\xD6\x13\xDF\xF0\x80\x7B\xB8\x3D\xF8\xD1\xEB\x5F\xA8\x4E\xD9\x22\xB0\x1E\xB5\x7E\x66\xE5\xC5\xCC\xC5\xB3\x9A\x20\xC2\x03\x66\xFB\x35\xA2\xCF\x96\x2E\x26\x67\x8B\x8F\xA3\x38\xF6\xF8\x39\x3B\x16\xC2\xB4\x2D\x0E\x15\x76\xAF\x42\x7F\xED\xFD\xA6\xF6\xA9\x04\x96\x45\x5C\x5D\x71\xF7\xCA\x2B\x28\x46\x2D\x14\x08\xAC\x71\x65\x6D\x15\x58\xA1\xF0\xC3\xAD\xC1\xB0\x83\xF5\xDE\x6B\x6F\x57\x0D\x4A\x05\x16\xF5\x73\xFC\xEE\x55\x2D\xCE\xA3\x6A\xB7\x9A\x28\x9D\x07\x1C\xE1\xD7\xEC\x45\x7D\x46\x6C\x8E\xE4\x98\xA7\x40\xC9\xDF\x23\xEC\xF3\xAE\x7F\x9D\xA9\xFC\x14\x7A\x6C\xE8\xAD\x1F\xBD\xFE\x45\xD3\x37\xB5\xC3\x7C\x97\xB8\x45\x78\x86\x05\x62\x54\xD1\xD7\x12\x3B\x4D\xAA\x51\x8D\x60\x25\x81\xD5\x5A\x74\xA3\xD8\xF4\x14\xB5\x27\xB6\x61\xDB\xFA\x93\x37\xBF\xD2\xF4\x80\x3B\xF5\xB3\x1D\xA5\x19\x79\x61\x89\xF3\x0C\x3B\x7A\x72\xB5\x74\xEE\x51\x7E\x8D\xEA\xB5\xD1\xC7\xD9\xFD\xEE\x68\x8E\x8A\xBC\x18\x91\xBF\x16\x2E\x0A\xDB\xE3\x18\xA1\xC7\xBE\xF7\xDA\x3B\xAF\x76\xB0\x7A\xBE\xA9\x5D\xB2\x69\xD9\x5B\x84\x67\x58\x1C\xD2\x45\x5F\x9D\x68\xD6\x24\x53\xCF\x5B\x6A\x36\xE1\xDF\x46\xCD\xE3\x29\x14\x2B\x93\x19\xE2\xD3\x63\x77\x7E\xAC\xC7\x8F\xF0\xFC\xD5\xB7\xDF\x78\xDF\xFD\x80\x3B\xF5\xF3\x8D\xDD\x10\x8D\xCE\x67\x6B\x8C\x47\xDB\xD1\x93\xA7\xAD\xE2\x6A\x54\xBF\x08\x4C\x47\xF1\xCA\xE3\x35\x6A\x9E\xAD\xFE\xBA\x15\xA7\x11\x76\x58\x73\xB3\x96\x3B\x23\x6C\x6B\xBD\x90\xAE\xD9\x5A\xFA\x3C\xEC\x5C\x85\xBF\x20\xAC\xA2\xC0\x6A\xFD\xA6\xF6\xD6\xFC\x08\xAC\x96\xC8\xFC\xE2\x9C\x91\x57\x3C\xD6\x22\x98\x95\xE4\xA3\xE6\xF1\xE0\xB7\x32\x89\x63\xAE\x60\x73\xCF\x22\x15\x1A\xC0\xC7\x6F\xBC\xFB\x4A\x60\x79\x1F\x70\x3F\x83\xC0\x3A\xB2\x7E\x46\xE6\x86\x27\x4F\x47\xDA\xE1\xA9\x2D\xCB\xB1\x47\xFA\x35\x73\xF7\x6A\x94\x40\xF4\x8A\xAB\x11\x76\x78\x62\x58\xCB\x89\x51\xB9\xAB\xB4\x71\x4F\x58\xC5\x47\x2E\xC2\xAD\xC1\xF0\xBF\x3F\x7C\xED\x0B\xEE\x0B\xD9\x1A\xA3\x53\x0B\x2C\xCF\xC3\xB9\x23\x92\xE1\xC8\x05\x62\xB4\x88\x18\xE9\x5B\x2D\x29\xB7\x3E\xF7\x16\xDE\x88\x98\xB7\xDA\x9E\x9E\x67\xF5\x23\x6C\x5D\x47\x81\x55\x7B\xC0\x7D\xF4\xC3\xED\x23\x58\x8E\xCC\xB1\x3D\xC6\x23\x7C\x69\x89\xEF\x68\x3B\x14\xB9\xBA\x8A\x5F\x33\x05\xD6\xE8\xB8\x58\xEB\x7F\x84\x1D\xD6\xB9\x2D\xB9\x33\xC2\xBE\x11\x3B\x58\x71\xA7\x2A\xFA\x14\x85\x55\xD8\xB5\x4A\x77\xB0\x82\xC0\xAA\x5D\xC8\x5A\x9F\xBD\x8A\x73\x2D\x29\xB0\xCE\x76\xF5\x7D\xE4\x95\xC6\x8C\x24\x1F\x35\x87\xA5\x88\x5B\x1A\xFC\x88\x78\x78\x6D\x55\x88\xC4\x70\x7B\x30\x0A\xAC\xDA\x03\xEE\x67\x7B\xB8\x7D\xF4\x2D\x99\xA3\x04\x96\x67\x01\x5B\xA5\xAE\x2C\xB9\x7D\xB4\x5F\x57\x11\x58\xAB\x70\xB4\xC4\xBC\x76\xCC\x88\xFC\xF5\xF0\x09\xF6\xE5\xE2\xA9\x64\x73\xDE\x3B\xA3\xB0\x4A\x05\xD6\xBB\x4F\xE1\x21\xF7\x2F\x54\xBF\xA9\xFD\x30\x02\x6B\xA5\xDD\xAB\x11\x0B\xBA\x35\xD1\x66\x24\xF9\x88\x39\x6A\xC5\x5B\xFA\xDC\xCA\x64\x44\x3C\x5A\xEC\xED\xF1\x21\xDE\x1E\xFC\xD6\xEB\x5F\x76\x6F\x5B\x5B\x2E\x50\x1E\xB9\x7E\x46\xE6\xF3\x15\x72\xB4\x27\x6F\x47\xD5\xDE\x48\x81\x35\x5A\xEC\xAF\x74\x91\xE8\xC9\xCF\x5A\xCF\x1B\x51\x47\x56\xFB\xA2\xB0\xAA\x5D\x78\x06\x1F\xA2\x90\xBA\xEF\x60\xDD\x76\xAE\xE2\xB9\x61\xE7\x2A\x3E\x83\xB5\x37\x9E\x57\x5C\x85\x39\x96\xDB\xC1\xB2\x2C\x0E\xAF\xB6\xF5\x7E\xFD\xCF\x6B\xF1\xFF\xE5\xE7\xEA\x44\x28\x25\xC1\x8C\x39\x4A\x0E\xAB\xE7\x0D\x73\xCC\x6C\x38\xE6\x20\x16\xEC\xDA\x3A\x77\x04\x13\x8F\x9D\x7B\xC7\x5A\x1B\x48\xBC\x3D\xF8\xAD\xD7\xDF\x75\x6D\x5B\x53\x3F\x37\xFA\x47\xEC\x60\x59\x63\x1B\xF3\x63\xE5\x3C\x6D\x15\x05\x23\x04\xD6\xC8\x5B\xC9\x33\xFB\xDD\xD1\xF9\xE1\x9D\x7F\xAF\x8F\x8D\xCA\x5D\xAB\x8D\xA1\x3F\x96\xC4\x53\xC9\xE6\x97\x02\xEB\xF6\xBA\x9B\xF8\xEF\x37\x81\x75\xDB\xC1\xDA\xFB\x7B\x18\x81\x75\xA4\xB8\xDA\x6A\xDE\xEA\x84\xB3\x24\x9A\x7A\xCE\x98\x5C\xAB\x0A\xAC\xDA\xC2\xB9\xFA\xC2\x65\x89\x69\xF4\x21\xDE\x1E\x0C\x3B\x58\x9E\xC2\xB7\x08\xAC\x47\xAE\x9F\x51\x35\x63\xCD\xCD\xD5\x73\xB4\xB4\xC0\x78\xF2\x76\x04\xDF\x91\xBB\x57\x79\xDC\x46\xD8\xBF\xD5\x57\x67\x0B\x18\x4F\x1C\x6B\x17\x94\xA3\x38\x59\x6D\x0C\xFD\xD1\x2E\xB0\x9E\xBF\x3F\x30\x0A\xAB\x70\x5B\x30\xFC\xC5\x6F\x11\xAA\x77\xAF\xC2\xD8\x4B\xED\x60\x59\x16\x87\x57\x40\x16\xDB\xBD\x1A\x7D\xD5\xB6\x95\xEC\xB3\x92\x7C\xD4\x3C\xB5\x22\x6E\x69\xF6\x2B\xD9\x9A\xDB\x6F\x6D\x1E\xE9\xED\xC1\xF0\x0C\x56\x6D\x1B\x3C\x5E\x59\x51\x3F\x77\xE2\x5B\xAC\x47\xE5\x87\x35\xB6\x67\x13\x58\x2B\xF8\x75\x05\x81\xB5\x12\xC7\x96\xBE\x9B\x9F\x33\xA2\x8E\x3C\x8C\xC2\xAF\x5B\xDC\x04\x56\xFD\xE5\xCB\xF9\x0E\x56\x14\x56\xCF\x1F\x72\xDF\x1E\xA7\x65\xE7\x2A\xF2\x3A\x9D\xC0\x5A\x51\x5C\xA9\x05\x96\x35\xD1\x66\x25\xF9\x88\x79\x5A\x8B\xBC\xC6\x66\x25\x5B\x5B\x05\x96\xE7\xF6\x60\x98\xC3\x23\xB0\x1E\xBD\x7E\x46\xE5\x47\x2D\x2F\x67\x2C\x50\xAD\x35\xB5\x77\xDE\x0A\x7E\x8D\x14\x58\xB3\x76\xEB\x57\xE2\xA8\xC8\x93\x11\x75\x64\x65\x14\x7F\xDD\xC2\xBA\x83\x15\x05\x55\xF4\xFB\xFE\x90\xFB\x7D\x07\x6B\x8F\xC9\x25\x04\xD6\x99\xAF\xBE\x11\x58\x8A\x92\xB5\x8D\x71\xC4\xB3\x35\x36\xCB\xF6\x8F\xB2\x36\x8F\x30\x4A\xCB\xED\x41\xEA\xA7\xBE\x7B\xA5\xAE\xD3\x34\xE2\x9E\xF8\x8E\xB4\x43\x91\xAB\x2B\xF9\xC5\xF3\x57\x9A\x88\x7A\xF3\xB3\x36\xEB\x91\x02\x2B\xFE\xBA\x45\xB0\x31\x17\x4F\x25\xBB\x6B\xCF\x60\x8D\xB8\x35\xB8\xDC\x0E\x96\x65\x81\x58\xF5\xEA\x5B\xDD\x30\xAD\xC5\x30\x23\xC9\x47\xCC\x51\x2B\xDE\xD6\x2B\xEA\xD5\x6C\x6D\x5D\xA8\xC2\xF6\x77\x78\xF6\x4A\x7D\x7B\x90\xFA\x19\xF7\x8B\x04\xD6\x9A\x8D\x39\xB1\x72\xAE\xB6\xE6\xAD\xBA\x0F\x86\xF1\x10\x58\x3D\xDD\xD2\x76\xD1\xE1\x9D\x61\x54\xEE\x5A\x6B\x28\xFE\xBA\x85\x75\x07\x6B\xFB\x35\x0D\x63\x6E\x0B\xA6\x3C\x97\xB8\x45\x68\x11\x57\xC1\x68\x16\x88\x7B\xE8\x46\x24\x79\x29\xC1\x47\xCC\xE3\x2D\x68\x4B\xC3\x5F\xCD\xCE\xDC\x47\x6B\xF3\x88\xDB\xDF\x96\x6F\x0F\x86\x39\xC2\xF6\x35\xF5\xF3\x9C\xF6\x11\xBB\x9C\xD6\xF8\x22\xB0\x7C\xD5\x3F\xF3\xF6\xE0\x08\x81\x18\xBD\x3D\x3A\x3F\xBC\xF3\xEF\x45\x69\x44\xAF\xF5\xD8\x17\x2E\x40\xC3\xAF\x5B\xDC\x04\x96\xFF\x19\xAC\xDA\x39\x3D\xB7\x04\x73\x6E\x08\x2C\x43\xBD\x5B\x82\xAF\x4C\xBA\xD9\xF3\xED\x35\x01\xA5\x5F\x06\xD4\xD5\x43\xB6\xD8\xAC\x66\x67\xAB\xC0\x8A\xDB\xDF\x9E\x6F\x0F\xAE\x2E\xB0\x66\xE7\xF3\xA3\x09\xAC\xE0\xEF\xA8\xFC\xB7\xC4\x2E\xCD\x75\xA5\x1D\xB3\x77\xAF\xAE\x2A\xB0\xBC\x31\xAC\x35\x61\x65\x8C\xBD\x02\x34\x5E\x80\xDE\x05\xD6\xED\x9D\x56\x7B\x7F\x35\x41\x95\x9E\xAB\x14\x57\x61\xDC\xC3\x05\xD6\xEA\x8B\x43\x80\x64\x4D\x50\x55\xE2\x59\xE6\x53\xCD\x55\xDB\x1D\x1A\x31\x4F\xAD\x20\x6A\x9F\x8F\x7E\x30\x55\xBD\x60\x59\xE2\x19\x7D\x8E\xDB\xDF\xD6\xDB\x83\xD4\xCF\xCB\x6C\xA9\xF1\x1E\x91\xD3\xB5\x39\x4B\x39\xAD\xB2\x63\xF6\x2E\x4F\xAD\x3E\xD5\x7E\x8D\x12\x3E\x33\x2F\xD6\x56\xC8\x8F\x5A\xDC\xAC\x9F\xAB\xE2\x5B\x5B\x7B\x4A\xF6\xC4\x0B\x50\xCF\x0E\x56\xCD\x2F\xB5\xA8\x4A\xE7\x43\x60\x55\xE8\x7B\x0A\x43\x95\x78\x96\x39\x55\x73\xD5\x92\x5C\x39\x8F\x4A\xB8\x8C\x14\x58\x23\x16\x2B\x4B\x3C\x43\x1C\x5A\x7E\xDC\x79\x75\x81\x65\xF5\x5D\xB9\x88\xD6\xE6\x54\xE6\xB4\xF7\x0A\x3C\x6F\x37\x0A\x5B\x46\xE4\xEC\x4A\x7E\x29\x73\xA3\xD6\xEF\x66\xCF\x55\x5B\xFC\x95\xF9\x51\x9B\xCB\xFA\xB9\xC2\xA6\x7C\xAE\x5A\xCD\xE6\x17\xA0\x9F\xBC\x79\xBB\x45\xD8\xF3\x37\x52\x58\x45\xBB\x4E\x21\xB0\x56\x7E\xF6\x2A\x0D\xB0\x2A\xF1\x2C\xC9\xA6\x9A\xAB\xD6\x48\x95\xF3\x8C\x10\x58\x4A\xFB\x02\x0B\x95\x8D\x96\x46\x9E\x37\x87\x96\x1F\x77\xB6\x08\x2C\xEA\xE7\x39\x69\x75\xCE\xD4\x6A\x68\x6F\x11\xE8\xB5\x65\xF4\x6D\xB4\x58\x13\xDE\x85\x4C\xE9\xD7\x08\xD1\x73\x86\xDB\xC8\x0A\xBF\x2D\x6B\xC9\xEC\xD8\xB6\x8A\xAB\x70\x5E\x7C\xFE\xAA\xF6\xA3\xCC\xF9\x1C\x33\xC4\x54\x89\xE3\xA1\x02\xCB\xB2\x38\x04\xA3\x8F\x5A\x20\xBC\xC9\xD9\xDB\x54\x3C\x8D\x5A\x35\x57\x6D\x4E\xE5\x3C\xAA\x2B\xED\x51\x8B\x8A\xCA\xBE\x16\x71\x15\xCE\xF1\xFE\xB8\x33\xF5\x53\x5E\x1A\x6A\x75\xAB\xCC\xE9\xD6\x58\xAB\x2E\xCC\x46\xD5\xC2\x4A\x7E\x29\x84\x86\x67\x51\xBF\x6A\x7E\x78\x85\x54\xE9\xF8\x11\x6C\x6A\xF5\x1A\xED\x48\x9F\xBF\xF2\xFC\xBA\x85\xC2\xEF\xD6\x31\x96\x17\x58\x47\x89\xAB\x96\x2B\x37\x55\xF2\xD5\x12\x4E\x35\x8F\xA5\x89\x2A\xE7\x52\x09\x18\xD5\x38\x5B\x4D\x77\x84\xCF\xB5\x02\x6D\xF9\x71\x67\x8B\xC0\xA2\x7E\xCA\xE4\x95\x31\xB6\xD4\x51\x2D\xFE\xAD\x22\x62\xE4\xED\xF2\x55\xFC\x1A\x11\xAB\x23\x7A\x6C\xCB\x9A\xD2\x2B\xC4\x6B\x7E\x5A\xF2\xB2\xD7\x86\xDA\x1C\x56\x1B\xD3\xE7\xAF\x6A\x0F\xAE\x1F\xB5\x63\x95\xFB\x7A\x98\xC0\xB2\x2C\x0E\x67\xDA\xBD\x6A\x6D\x90\xA5\xE4\xAB\x25\xDC\xAC\x86\xA3\x9E\x47\x25\x8C\x54\xE3\x6C\x2D\x20\x4A\xBF\x6B\xB1\x8C\x36\x78\xDE\xDE\x7E\x86\x57\x33\x58\xFD\x1E\xD1\xBC\x2D\x73\x2B\x63\xEC\xD9\x1D\xA9\x2D\x36\x1E\xBB\x4A\x7E\x7A\xCE\xAF\xD9\xB2\x8A\x5F\x23\x7C\xAA\xE5\xC8\x88\x39\x23\xCF\xDA\xDC\x7B\x71\xF1\xD8\xD5\x33\xCF\x96\x0D\x9E\xF9\xAD\xF9\x65\xB5\x33\x7E\x01\xC8\xF2\xFC\x15\x02\xEB\x57\x7F\xFB\xF3\x5A\x00\xCE\x74\xF5\x8D\xC0\xDA\x8F\xE6\x8C\x5B\x19\xB5\x7C\xDA\xFB\x7C\xB4\x68\xAB\xD9\xE6\x7D\x7B\xBB\xE5\x02\x85\xFA\xD9\xA7\x3E\x62\xB1\x50\x2C\xA2\x96\x5E\x72\xC4\x33\x44\xBD\x3B\x30\xAD\x7E\x8D\x88\x93\x65\x51\x1F\x31\xEF\x0A\xF9\x51\xEB\x45\x2A\x81\x67\x99\xC7\x12\x87\x38\x8E\xE7\xF9\xAB\x87\x16\x58\x96\xC5\xE1\x6C\xBB\x57\x96\xE6\x61\x49\x38\x4B\x13\x53\x17\xFE\x56\x92\x2B\xE7\x59\x59\x60\x8D\xB2\xCD\xDB\x3C\xAC\x6F\x6F\xB7\xE6\xD1\x51\x02\xCB\xE3\xF7\x51\x3B\x58\xCA\x7A\xDD\x8A\x47\x2B\x87\x7C\xBC\x52\x1D\x1E\x25\xB0\x2C\xFD\xC9\x9A\x9F\x56\xBF\x94\x7D\xC8\x63\xBF\x7A\xDE\x9C\xCB\x51\xF9\x61\x8D\x4F\xE9\x38\x35\x13\x2B\x83\x33\x3E\x7F\x15\xF8\x1D\x72\x8B\x10\x81\x65\xDF\xED\x39\x32\xC9\x95\xC5\x34\x4A\xC4\xF4\x34\x8B\x52\xB3\x1D\xE5\xF3\x9E\x9D\xDE\xB7\xB7\x5B\x7D\x46\x60\xD5\x49\x29\xE3\x5D\x9A\xCD\xBA\x80\xD4\x2D\xF5\x1D\x71\x25\xBF\xD4\xBE\x78\x62\xA2\x9E\x7B\x94\xC8\xF2\x65\x47\xDB\xD1\x23\x58\x58\x63\x71\xC6\xE7\xAF\x96\x16\x58\x67\x5B\x1C\x94\x57\xC4\xB5\xA4\x53\x27\xFA\xEC\x1D\x2C\x25\xAB\xB6\x56\x71\x3F\x2B\xF7\x5D\xC9\xB6\x16\xC7\x68\x85\xF7\xED\xED\x96\x0B\x14\xEA\xC7\x9E\x19\xCA\x98\x8F\xDE\xCD\xB2\x7B\x35\xEE\x77\x17\x53\x1B\xAC\x39\xEE\xB1\xDB\xB2\x83\xD7\x33\x9E\xD7\xE6\xAB\xE6\x47\x60\x18\x2E\xEE\xBE\xF2\x9B\x1F\x9A\x70\x8E\xE0\x60\x8D\xC5\x19\x9F\xBF\x3A\x44\x60\x59\x16\x87\x60\x18\x0B\xC4\x76\xCE\xAB\x13\xFD\x51\x05\xD6\x0A\xE2\x2A\x44\xD9\xF3\xF6\x76\x53\x27\xA4\x7E\xAC\x98\x7E\x79\x9C\xBA\xA6\x56\xD9\xCD\xBA\x82\x5F\x6A\x1F\xAC\x8B\x7A\x1A\x43\xB5\x0D\xAB\xE4\x47\xB8\xB8\x7B\xFB\xEB\x5F\x33\xD5\x8B\x9A\x81\x27\x0E\x67\x7C\xFE\x6A\x59\x81\x75\x46\x71\xA5\xDC\x95\x99\xF9\x7C\xC5\xAC\xB9\x46\x8A\x19\x53\x77\x28\x1C\x34\xD2\x26\x6B\xF3\xF0\xBE\xBD\xDD\xE2\x2B\xF5\xF3\x0D\x0B\xA6\x17\xC7\xA8\x17\x90\x55\x76\xB3\xCE\xEC\x97\xDA\x76\x6B\x5D\x96\x62\xA7\xB6\xE5\xE8\xFC\x08\xBD\x27\xBC\x4F\xEA\xB3\xAF\xFD\x9A\xA9\x5E\xD4\xFE\x5B\x63\x71\xD6\xE7\xAF\xA6\x0B\xAC\xB3\xEE\x5E\xA9\x13\xAB\x96\xCD\xB3\x44\x4F\xB0\x63\xC6\x5C\xA5\x39\x66\x33\xCD\x99\x8F\xB6\xC9\xDA\x3C\x3C\x6F\x6F\xAF\xE5\x4D\xFC\x7C\x35\x81\x35\x3B\xD6\x56\xF6\x8F\xB0\x88\x46\x1F\x67\xC5\xA0\x87\xFD\x8C\x78\xF4\xDA\x77\x56\x8E\x39\xDB\x20\x5A\xC2\xBB\xA4\x3E\x7A\xFD\x8B\x4F\x3F\xFC\x8D\xF7\x4C\xAD\x45\xED\xBB\x35\x16\x67\x7D\xFE\x6A\x49\x81\x75\xD4\xE2\x60\xCA\xB0\x49\x07\xCD\x10\x3D\xD1\x95\x19\x73\x8D\x16\x33\x2D\x61\x19\x6D\x93\xB5\x79\x78\xDE\xDE\x6E\xF1\x93\xFA\xB1\xFF\x38\xFB\x16\x4F\xF5\x42\xB2\x17\x37\x6B\x9E\x58\x62\x5F\x3B\xE6\x8C\x7E\xA9\x6D\x56\xF0\x56\xDB\x74\x44\x7E\x04\xD1\xF2\xDE\x6B\xEF\x98\x77\xAF\x94\x77\x68\x2C\x6B\x4F\xCA\xE4\xAC\xCF\x5F\x4D\x15\x58\xAB\xEF\x5E\xD5\x9A\xD3\xCC\xCF\x67\x88\x9E\x5A\x92\x2B\x9B\xC8\x8C\x67\xBC\x3C\xF1\x59\x45\x5C\x05\x9B\xC3\xB3\x05\xE1\xF5\x0C\x96\x97\xE7\x59\x7C\x44\x60\xF5\x0B\xAC\x11\x8B\xC9\x11\x8B\xE8\x8C\x1D\xA1\xD1\x7E\x29\xFB\x50\xB0\x55\x21\xB0\xCE\x9E\x1F\xF1\xD6\x60\x10\x58\xAB\xEF\x5E\xC5\x1E\xF9\xED\x37\xDE\x7F\xB2\xFC\xFE\xE0\x2A\xEF\xBF\x8A\x75\x31\xED\x35\x0D\x08\x2C\xCB\xF2\x78\x3B\x66\x96\xC0\x3A\x7A\x1E\x75\xF3\xB4\x12\x5E\x45\x60\x8D\x78\x3D\x03\x02\x4B\xB7\x88\x9E\x7D\x21\xDD\xAB\x87\x99\xB5\xD7\x23\x6A\x94\x76\xF6\xD8\x71\x95\xDD\xCE\xF4\xD6\x60\xB8\x45\xF8\xFD\x0F\xBE\x64\x6A\x9B\xCA\x38\xD4\xD6\xB8\xD4\xA0\x33\x3F\x7F\xB5\xDC\x0E\x16\x8B\x03\x02\xCB\x54\xED\x1D\x07\xCD\xD8\x4D\xB3\x36\x72\xCF\xEB\x19\x2C\x2E\x53\x3F\xF5\xFA\xB1\x70\xCC\x8F\x51\x2F\x2E\xA3\x77\x7D\xAC\x3E\x9E\xC1\x2F\xA5\x8D\xD6\xBA\xB4\xF2\x8B\xC7\x29\x6D\xAC\xCD\xDD\xE3\x43\x14\x57\x61\xE7\x2A\x3C\xDC\x1E\xFE\xFB\xFB\x5F\xFD\x95\xDA\x94\xAF\x3E\x57\xFB\x68\xF5\xE3\xCC\xCF\x5F\x4D\x13\x58\xEC\x5E\x99\x72\xF8\x97\x07\xCD\x10\x01\xB5\xAB\x08\x65\x41\xCD\xF2\xC7\x42\x79\xB4\x2D\xD6\xC6\x11\x6C\x55\xBF\x9E\x01\x81\x35\x46\x60\xCD\x5E\x48\x3D\x39\x64\xC9\xF9\xDA\x31\xCA\x5A\x57\x8A\x47\xB5\x5D\xA3\xB9\xAA\xED\xDD\x62\xD9\xE3\x47\xE8\x39\x51\x60\xBD\xFB\xF4\xF6\xD3\xBF\xFF\xEA\xEB\xB5\xF4\x38\x54\x60\x9D\xF9\xF9\xAB\xA5\x04\x16\x8B\xC3\x3D\xCF\x47\x8B\x80\x38\xD3\x8C\x5B\x84\x33\xE6\x30\x75\x88\x49\xB7\x5E\xAD\xCD\x4F\xFD\x7A\x06\xEA\xA7\x5E\x3F\xD6\x3C\xD9\x3B\x6E\xD6\x22\x5A\xBB\x00\x52\xF8\x92\x8E\xB1\xA2\x5F\x6A\x9B\xAC\xB5\xD9\xC3\x56\x6D\xB3\x52\xB0\xC6\xB1\xBE\xF9\xE9\x67\x4F\x1F\xBE\x76\xDB\xC1\xFA\xEE\x3F\xFB\x3B\x93\xBB\x6A\xBF\xAC\xB1\x38\xEB\xFB\xAF\x22\xD4\xE1\xCF\x60\xB1\x7B\x65\xCA\xDF\x67\x07\xCD\x10\x58\xB5\x04\x57\x15\xD4\x19\x04\x96\xCA\x57\xCF\xA2\xA8\x7E\x3D\x03\x02\x6B\x8E\xC0\x62\x37\xCB\xDF\xCF\x4A\x67\xD4\xFA\x4F\x38\xE7\x88\xBA\xD4\x78\xA7\xB5\x5D\x2D\xB2\x7E\xE7\xCF\xFE\xF6\x17\x02\xEB\xED\xA7\x4F\xFE\xE9\xFF\x33\xB9\x7C\x54\x2C\x82\x18\x0C\x0F\xB8\x87\x5B\x9A\xB5\xBF\xD5\x1E\x70\x9F\xB2\x83\xA5\x16\x58\xCA\x40\xD7\x02\x76\xD4\xE7\x8F\x22\xB0\xD4\x4D\xB4\xB5\x11\x29\x73\xCA\xB2\x70\x04\x3B\x8F\x7A\x3D\x83\xD2\xD7\xA3\xEA\xA3\x36\xAF\x35\x06\xB5\x71\x6A\x9F\xCF\x62\x39\xCB\x9F\xD5\xC4\xA3\x92\xEF\x6C\x86\xAB\xF4\xB6\xAD\x1C\xFE\xBD\xFF\xFE\x0F\xCD\xE2\x4A\xED\x8B\x35\x16\x61\x97\xFF\xBB\x6F\x7D\xF0\x4A\x60\x85\x07\xF2\xF7\xFE\x56\x14\x57\xCB\x08\x2C\xAE\xBE\x9F\xA7\x0E\x02\xAB\xB6\xB4\xF9\x3F\x9F\xB1\x93\x66\x6D\x1C\xC1\x7A\xE5\xEB\x19\xA8\x1F\x5B\xFD\xF8\xB3\xC6\x76\x86\x52\x08\x6C\xCD\xE8\xC9\x2D\x9B\xD5\xF5\xA3\x8E\xF6\x4B\x39\xFF\x11\xFC\x66\x0A\x56\xAF\x7F\xDF\xFB\x1F\xFF\xE8\xE9\xE3\x7F\xF2\x7F\xEB\x49\x20\xDE\x49\x0C\x13\x5A\x6D\x0D\xBB\xFC\xDF\x79\xF3\x03\xD3\x2B\x6C\x1E\x52\x60\xA9\x77\xAF\xD4\x4A\xDA\x94\x5D\x07\x1C\x84\xC0\xD2\x42\xAF\x15\xB4\xAA\x91\xD7\xE6\x89\x5E\xA9\x5F\xCF\x80\xC0\x3A\x56\x60\xCD\xEA\x4B\xD6\xFC\x52\x56\x8F\xAA\x36\xF6\x6C\x5A\xA1\xDF\x29\x99\x95\xC6\x3A\x92\x63\xAF\x6F\x6A\xDB\xAD\x79\x1C\x76\xF9\x83\xC0\x3A\xE3\xFB\xAF\x22\xF3\xA1\xCF\x60\x59\x04\x16\x8B\xC3\xCB\xF4\x1F\xDD\x70\x2C\x09\xAE\x2A\xAA\xDA\x5C\xAA\x79\x7A\xAE\xFC\x55\x36\xD4\x7C\x8D\x36\x2A\x5F\xCF\x40\xFD\xD8\xEB\xA7\x77\xA1\xB1\x9C\xAF\xCA\xA5\x9E\x7C\xB6\xD8\xE9\x3D\xE6\x08\xBF\x54\x73\x5A\xEB\xD2\xCB\xA4\xE5\x78\x95\x4F\x33\xF3\x43\x69\xB3\x27\x16\x61\x97\xFF\x3B\x6F\x7E\xF5\xB4\xCF\x5F\x85\x18\x0D\x13\x58\x16\x71\x15\x0C\x60\x81\xB0\x2F\x10\xAA\x44\xB7\x24\xB9\x62\x2E\xCB\x3C\xA3\xAF\xFE\x6B\x36\x28\xFC\xF4\x6C\x7B\x87\x63\x95\xAF\x67\xA0\x7E\xEA\xF5\x63\x8D\x71\x2D\x57\xAC\x0B\xAA\x75\x3E\xEB\x78\xF9\x71\xD1\x4E\xEB\x3C\x67\xF3\x2B\xFA\x6B\xF5\xAF\xC6\xB1\xE6\xBF\x75\x9E\xDA\x38\x35\x3B\xD4\x7E\xCD\x12\x59\x56\x3E\x16\xFF\xAD\x0C\xE3\x2E\x7F\xD8\xC1\x3A\xEB\xF3\x57\xA7\x12\x58\xCA\x20\x5B\x12\xE1\xC8\x63\x4A\x49\xA8\xF4\xDF\x92\xE4\x8A\xF9\x2C\xF3\x8C\x14\x58\x96\xF9\x15\x7E\x7A\x05\x96\xE7\xAB\xC7\xB5\x3C\xB4\x0A\x2C\x95\x9F\x35\x7B\x56\xF8\xDC\x2B\x40\xB6\x04\x4C\xAF\x2F\xAB\x31\xB7\xD4\x83\xC5\xE7\x51\x7E\xA5\xF6\x29\xE7\x50\xDF\x11\x38\x13\x47\x4B\x3C\x6B\xC7\xCC\x88\x45\x6E\x43\xDC\xE5\x0F\x3B\x58\xB5\xBF\x55\x9F\xBF\x3A\x5C\x60\x59\x17\x87\x91\x8B\x70\x2D\x78\xB5\xCF\xF3\x62\x53\x24\xE3\xD1\x02\x4B\xE1\x83\x47\x74\xA8\xE6\x6B\x59\x28\x55\x73\x5B\x9B\xAE\xE7\xA7\x1F\x6A\xB9\x47\xFD\x94\x09\x85\x58\x28\xE2\x6A\x8D\xE9\x5E\x9C\x14\x76\xD4\xF2\xC0\xFB\xF9\xCA\x7E\xF5\x8A\xE3\x12\x8B\x51\xFD\xF4\x0C\x1C\xBD\xB9\x51\x3A\x5E\x99\xC3\x56\x66\x67\x7F\xC1\x68\xE4\x38\xE4\x16\xE1\xD5\x6E\x0F\x5A\x93\x42\x25\x04\x47\x35\x84\x18\xF4\x9A\x3F\xAA\x82\xAA\xCD\x13\xED\x51\xCD\x97\x36\x87\xD9\x73\x5B\xE7\xF3\xFC\xF4\x43\xAD\x39\x9E\x45\x60\x59\xD9\x28\xEB\x47\x95\x53\x1E\xDB\xB7\xE2\xA5\xB2\xA5\x96\x0F\x9E\xCF\x57\xF5\xEB\x4C\x02\xCB\x73\x11\x39\x5B\x84\x2B\xE2\xAB\xEE\xCF\x1E\x9B\x3C\xBB\xFC\x0F\xB7\x83\xA5\x16\x58\x33\x1A\x94\x27\xF8\xA3\x8B\x65\xA4\xC0\xB2\xF8\xA9\xE2\x6D\x99\x4B\x5D\xC4\x56\x11\xA9\x9C\xD7\xE3\xA7\xE7\xCA\xAC\xB6\x60\x5A\x05\x96\x2A\x9E\x7B\xF6\x78\x18\xCC\xA8\x1F\xB5\xCF\xBD\xFE\xA9\xED\xA9\xE5\x86\xF5\xF3\xD5\xFC\x52\x0B\xAC\x2D\xFF\xD4\xF1\x58\x95\xA3\x35\x0F\x46\xD7\xA4\x47\x8C\x7A\x76\xF9\x57\x16\x57\xC1\xE7\xC3\x76\xB0\xAC\x8B\x83\xEA\xAA\xB6\x65\x77\xA3\x25\x39\x15\x85\x8B\xC0\x6A\x21\x7F\x3F\xC7\xDA\xEC\x14\xB1\xF2\x36\x8E\x8F\xDF\x78\xF7\xD5\x8B\xF3\x2C\x5F\x3D\xDE\xA3\x40\xFD\x6C\xD3\x51\x2F\xD2\xAA\xDE\xA1\xCA\xB7\xBE\x4E\xA7\xD7\x11\x00\x00\x18\xC3\x49\x44\x41\x54\xEA\x28\x9F\x6D\xAD\x99\xD2\xD9\x4A\xBF\xD4\xB1\xDB\xF3\x4B\x69\xB7\xF7\xC2\x6E\x16\xC7\xDE\x5C\x51\x32\xB2\xE6\x98\x67\x97\xFF\xE1\x04\xD6\xAA\xBB\x57\xD6\xE0\xAE\x90\x90\x57\x10\x58\x5E\xDE\x47\x14\xB2\x6A\x4E\xAB\xAF\xCA\x9F\xC7\xB1\x0A\xAC\xD9\x3E\xAE\x56\x3F\x2A\xFF\x73\xBF\xAC\x31\x4F\xCF\x1B\x65\x4B\x2F\xF3\x5E\x01\xA9\xF4\x6B\xA6\xC0\x1A\x71\xF1\xDE\x23\xB4\x46\x70\xEC\xCD\x8D\x23\x6C\xF2\xEC\xF2\x23\xB0\x0A\x11\xB6\x2E\x0E\xCA\x02\x68\x69\x88\x2D\xC9\xA9\x48\x48\x04\x56\x0B\xF9\xDB\x39\x9E\x38\x2B\x62\xE5\x99\x53\xF5\xF3\x38\xD4\xCF\x7E\x7E\xE4\x39\xA0\x8A\xF3\xDE\xAC\xB5\xBC\x53\xDA\xA0\x16\x21\xAB\xF9\x35\xBB\xEF\x2B\x63\xB3\xC5\xF2\x88\xFC\x68\xEF\xA2\xF7\x33\x95\x6C\x6A\x0C\xE2\xAC\x57\x79\xFE\x2A\xF8\x23\xBF\x45\x68\xD9\xC1\x9A\xBD\x40\x58\x03\xBB\x4A\x42\x8E\x12\x58\x56\x0E\x8A\xA2\xB2\xCE\xA5\xBE\xC2\xF7\xCC\x3B\xDB\x4F\xD5\xCF\xE3\x50\x3F\x3E\x81\xA5\x5C\xB0\x15\x3D\xA2\x77\x8C\x34\xC7\x15\x39\xDC\x6B\x8F\xEA\x7C\xB5\x5F\xB3\x7B\x81\x8A\x43\xEF\x38\x1E\xBF\x6B\x73\xA9\xF2\xCB\x63\xD3\xD9\x7F\xE0\x39\x65\x2A\x15\x58\x16\x71\x15\x26\xB7\x2E\x10\x47\x04\xB7\x96\x70\xB5\xCF\x15\x36\x23\xB0\x6A\x94\xCB\x9F\x7B\x8A\x58\xB5\xE8\x5A\xE7\x54\xFE\x3C\x0E\xF5\xE3\x17\x58\xAA\x78\xB7\x65\xA6\xEE\xAC\x51\xBD\x41\x67\x61\xDB\x48\x23\x76\x1D\xAD\xB5\x19\x2D\x56\xF4\xEE\x36\xEF\x75\x67\x79\x7D\xAE\xCD\xAC\x62\x62\xB5\xEB\x0A\x3F\xF0\xFC\x50\x02\xCB\x1A\xD8\x5A\xA2\x59\x3F\x57\x24\xE4\x88\x66\x13\xEC\xB7\xB2\x18\xE1\x83\x85\x5F\xEF\xBC\x56\xFF\x94\x0D\xD5\x3A\xE7\x11\x3F\x8F\xD3\xCB\xD3\x93\x33\x96\xF8\x5A\x8E\x19\x6D\xB3\x62\x7C\x8B\x1F\xA3\x8E\xD9\xCA\xB7\x2B\xF9\xA5\xF2\xC5\x5A\x9B\x69\xAC\x54\x73\x8F\x8A\x7F\x6D\xDC\x16\x9F\xF7\xC6\x54\xF1\xB0\xDA\x75\x85\x1F\x78\x46\x60\xD5\xB2\xB4\xE3\x73\x45\x42\x3E\xAA\xC0\xEA\xD9\x65\xB0\x16\xF0\x11\xE2\x2A\xCC\x79\xC4\xCF\xE3\x8C\xC8\xC5\x8E\xD2\x30\x9D\x3A\xC3\x66\xC5\x1C\x26\x67\xC4\x07\xD5\x72\xFC\x2A\x7E\xA9\xFC\xA8\xF1\xDA\x0A\x8F\x6A\x7E\x71\xF8\xAB\xC3\xB5\xFA\xBB\x92\xC0\xBA\xC2\x0F\x3C\x3F\x8C\xC0\x1A\x91\x70\xB5\x2C\x57\x14\xE7\x23\x0B\xAC\x56\x91\xE5\x8D\xF5\x88\x38\xED\xE5\x86\xE7\xC1\xCD\x5A\x8E\xCD\xBA\x45\xE8\x65\x5A\xB3\xDB\xF2\xF9\xCC\xB8\x28\xE6\xB2\xF8\xA4\x38\xC6\x13\x8B\xB3\xFB\xA5\xB2\xDF\xC3\xAC\x14\x23\x95\x1D\x8A\xF8\xD7\xC6\xE8\xF5\x75\xB4\xD8\xB4\xDA\x77\x85\x1F\x78\x46\x60\xD5\xB2\x35\xFB\x3C\xDC\x17\xFE\xCA\x6F\x7E\x68\x3E\xAB\xB7\x30\x47\x08\x2C\x6B\x82\xB7\x0A\x9C\x1C\x8E\x67\xBE\xDE\xE2\x6E\x99\xAB\x37\x46\xC1\x66\xEB\xBC\x9E\x17\xE7\x59\x92\xEC\x6C\x02\xEB\xE8\xFA\x99\x71\x85\x6E\x89\x5B\xEB\x31\xD6\x3C\x4B\xC7\x57\xE4\x77\xAB\xBD\xD6\xF3\x46\xDE\xEE\x6C\x61\x76\x56\x91\xE5\xF5\xD5\x53\x8F\x8A\x3C\xF2\xD8\x17\x1E\x70\x3F\xFB\x0F\x3C\x3F\x84\xC0\xF2\x04\x35\x02\x09\x89\x57\xFA\x0B\xBF\xE6\xFD\xA3\xCF\x7F\x62\x16\x59\xBD\x49\x59\xB2\x7D\xC4\x98\xBD\xC2\x66\xEB\xFC\x16\xF6\x96\xA6\xBC\xC5\xA0\x65\xBE\x5E\x9E\x1E\x81\xE5\x79\x71\x9E\x85\xC3\x0C\x81\xD5\xC2\x74\xE5\xFA\x39\xAB\xC8\x6A\x89\x43\xF4\x55\x91\xE3\x96\x7C\x6C\x39\xA6\xE6\x57\xAF\xED\xB5\xF1\x3D\x36\xF7\xDA\xE2\x99\xCB\x7B\x6C\x8B\x9F\xA1\x1F\xBD\xFD\xF5\xAF\x99\xA6\x52\xF8\x6E\xB5\x31\x3E\xE0\x7E\xF6\x1F\x78\x46\x60\x15\x76\xA8\xC2\x3F\x05\x21\x55\x16\x58\xEF\x3C\xFD\xE8\xF3\x1F\x4F\x4B\xCA\xA3\x05\x56\x60\xD0\x53\x58\xD6\x82\x32\x55\xF8\xC0\x83\x66\xF9\xE8\x79\x71\x9E\xC5\xDD\xD5\x04\x56\x14\x56\x2B\xD7\x8F\x85\x6B\x4F\x3E\x58\xC6\xF7\x1E\xA3\xAA\xA3\x33\xFA\xD5\x6B\xB3\x8A\x5D\x1A\xB3\x5E\x9B\xBC\xF1\xAF\x1D\xDF\xE2\x63\xA8\xD5\x8F\x5E\xFF\xC2\xD3\x67\x5F\xFB\xB5\xDA\xF0\xAF\x3E\x57\xF8\x6C\xB5\xF3\x6A\x0F\xB8\x07\x7E\x4B\xBF\xA6\xA1\xF5\x4A\xCC\x1A\xD0\x30\x7E\x48\xB8\xB8\x30\xBC\xF7\xDA\x3B\xBB\x02\x6B\x56\x52\x8E\xD8\x3A\xF7\x30\x69\xE5\x1E\xCF\x6B\x99\xCB\x54\xED\xE2\x83\x7A\x9A\x87\xD5\xC7\x90\x5F\xAA\x9F\xC7\x89\xEE\x5B\x05\x56\x6B\x1C\xAD\xBE\x9D\xAD\x7E\xAC\xE9\xD3\x93\x17\xD6\x39\x6A\xC7\x79\x62\x50\x1B\xAB\x35\x0F\xAC\xE3\x7A\x8E\xF3\xF8\xD5\x13\x07\xCF\x3C\x1E\xFB\x55\xA2\xC3\x3B\x67\x7E\x7C\xAB\x7F\x41\xC4\x7C\xF4\xFA\x17\x9F\x7E\xF8\x1B\xEF\x99\x4D\xE8\x89\x43\x98\xC4\x6A\xEB\xD5\x1E\x70\x3F\x8D\xC0\xF2\x26\xB5\x35\xA0\x61\xDC\x90\x70\x51\x58\x6D\x0B\xAC\xDB\x2D\xC2\x59\x49\x59\xB3\xBF\x25\xE1\x6B\x63\x6E\x55\xDB\xCC\xB9\xCC\x15\x2F\x3E\x70\xA4\x8F\xCA\x9F\xC7\x69\x15\x58\xD4\x4F\x5B\xC2\xB4\xE4\x45\xDB\x4C\xF7\xB3\x5A\xEB\xD4\x33\xEF\xD9\xFC\x6A\xB1\x17\x8E\x2F\x33\x22\xEE\x5E\x85\x1D\xAC\xEF\x7F\xF0\x25\x4F\xCA\xBC\x3A\xB6\x25\x0E\x1E\x81\x75\xB5\x07\xDC\x0F\x13\x58\x5F\xFA\xDB\xFF\x60\x7E\x9E\x29\xCF\x02\x4B\x90\xAD\xC5\x15\x13\xEE\x2E\xB0\xF6\x6F\x11\x7A\x93\xD2\x62\x6B\x29\xCB\xAD\xF6\x5B\xC7\xB7\x8E\xB7\x57\x71\xD6\xB9\x3C\x05\xE5\xAE\xF0\xC1\x27\x8C\xF0\x51\xF5\xF3\x38\xA9\xEB\xD4\xCF\x7E\x22\x28\xF2\x3D\x9D\xC1\x93\x17\xAD\x29\xAA\xB6\xD9\x62\xC7\xD9\xFC\xB2\xDA\x3B\x9B\xA5\xD5\x2E\x4B\x4C\xB6\x8E\xE9\xF5\x29\xDE\xA9\x09\xBB\x57\x41\x60\xFD\xDB\x9F\x7E\x3A\x74\x0D\x8E\x7E\x78\xEC\xBE\xDA\x03\xEE\x87\x09\xAC\xAF\xFF\xF8\x3F\x9A\x9F\x67\xF2\x2E\xFA\x9E\x80\xC6\xED\xD2\xDA\x2D\xC2\x77\x9F\xDE\x7E\xFA\x8B\xA7\x9F\x34\x27\xA5\xB7\x00\x3D\x3E\x44\x3E\x7B\x73\xB4\x8C\xE7\xE5\x9E\x1E\xAF\x9E\xAF\xA7\x31\xB5\x9E\xAB\xE2\xA9\xFA\x79\x9C\xD4\x0F\xEA\x67\xAE\xC0\x1A\x25\xB6\x56\xAA\x13\x6F\x8F\xDA\x8B\xC0\x0C\xBF\x54\xF5\xD9\xDA\x1F\xB6\xCE\x5B\x91\x63\x14\x57\x61\x23\x21\x88\xAB\x0F\x5F\xFB\xC2\xD3\xEF\xFE\xEC\xD3\x61\x6B\x70\xCB\x5A\x70\xC5\x07\xDC\x0F\x13\x58\xDF\xFC\xC9\x7F\x7A\xFA\xC1\xCF\xFF\xBA\x59\x41\xAB\x8A\x22\xEC\x2E\x84\x84\x8B\x3B\x58\x41\x48\x95\xFE\xC2\xE7\xE1\x21\xF7\xD1\x49\xA9\x6C\x4C\xB1\xD0\x95\x63\x96\xD8\xE4\x0D\x65\xF4\x7C\xAA\xD8\x7B\xC7\x69\xE5\x19\xAE\xCA\xBE\xF5\xFA\xBB\x4F\x1F\xBF\xF1\x65\xEF\x94\x9B\xC7\x53\x3F\x7F\x54\x64\x73\x54\xEE\x59\x16\xD5\xA3\x6C\xEB\x49\xBA\x33\xF9\xD5\x52\x9F\xF1\xCB\x19\x9E\x57\xF0\xB4\xF0\x3C\x92\x63\x2A\xAE\x72\x81\x35\x62\x0D\x4E\x7D\xF5\xE4\xFC\x15\x1F\x70\x3F\x4C\x60\xFD\xCE\xDF\xFD\xE7\xA7\x1F\xFC\xFC\xAF\x24\x0A\xBA\x25\xE1\xC3\x39\xF1\xE1\xE3\x20\xB0\xA2\xB0\xAA\x3D\x83\x15\x04\x96\xF5\x41\xF7\x56\xBB\x1E\xE5\xBC\xF4\x2B\xFD\xA3\x1B\xDC\x51\x4C\xE3\x55\xD9\xB7\x5E\xFF\xF2\x2B\x21\xBF\xF7\xF7\xD6\xDF\xFC\xC1\x6B\xD6\xDF\xF2\xA4\x7E\x8E\x8A\x28\xF3\x5E\x89\x40\x58\xD4\xC3\x9F\xE7\x15\x3C\x67\xF3\x3F\x3E\x63\x1C\xD6\xB6\x70\xA7\x26\xEC\x5E\x85\x5E\xF4\xBB\x3F\xFB\xB3\xC3\xD7\xE0\x94\xE5\x15\x1F\x70\x3F\x4C\x60\xFD\x9B\x9F\xFE\xC9\xAB\x1D\xAC\x11\x0A\xDA\x5A\x00\xF1\xE1\xE3\x90\x70\xD6\x67\xB0\x42\x52\x7E\xEF\xEF\xFF\xE2\xF0\x9D\x37\xAB\x8F\x2B\x1F\x17\x9B\x5B\x6C\x70\xE1\xBF\x57\x13\x5A\xF1\xAA\x2C\x7C\x8B\x70\xEB\x15\x06\x31\x46\x1E\x81\x45\xFD\xAC\x9C\xD9\x73\x6C\x7B\x84\x0B\x94\x91\x24\xE3\xF3\xB7\xB7\xFE\xF3\xE3\xCB\x89\xAC\x98\x1F\xF1\x0E\x4D\xE8\x3F\x61\x9D\xBB\x0B\xAC\x4F\x0F\x5F\x83\xD3\xF8\x5E\xF1\x01\x77\xB9\xC0\x0A\x03\x5A\xAE\xC2\x6F\xEA\x39\x08\xAC\xBF\x3A\x24\xB1\x63\x71\x85\x85\xEF\x26\xB0\x6E\xB7\x06\x2D\x3B\x58\x41\x60\x5D\xF9\x8A\x67\x64\x53\xCB\xAF\x58\xE2\xFF\x0F\x0D\x2E\x15\x5A\x0A\xB1\x35\x6B\xFB\x7F\x8B\x57\xCC\xB1\xF0\x56\x62\xCB\xED\xC1\x20\xB0\xA8\x9F\x59\xD9\x77\xEE\x79\xD2\x57\xCB\x5C\xF9\x02\x65\x64\x94\xE2\xF3\xB7\x77\x81\x75\x13\x59\x8A\xDE\x33\xD2\x6E\xCB\xD8\x69\x7E\x84\x87\xDA\xA3\xB8\x0A\x77\x6A\x82\xE0\xBA\xEF\x60\x1D\xB7\x06\xA7\x7E\xC4\x5F\xBA\xB8\xD2\x1B\xDC\xA3\x7F\xD2\xF7\x60\x59\x17\x88\xDF\xFB\xD9\xFF\x79\xFA\xE3\xCF\x6F\x3B\x58\xF1\xEA\x61\x66\x62\xC7\xE2\x8A\xB7\x6E\x6A\x3B\x58\x11\x56\xDC\xC1\xF2\xBC\x74\xD4\x52\x10\x8F\x76\x4C\xBC\x3D\xFB\x52\x60\xDD\x84\x56\x2E\xB6\xAC\xB9\x91\x5E\xD5\x47\xD1\x7C\x94\x18\x8E\x39\x16\xDE\x4A\x5C\xBB\x3D\x18\xFC\xF3\x08\x2C\xEA\xA7\xAF\x62\x8E\x16\xDF\x3D\xD6\xA7\xCF\xD4\xBC\xAC\x9F\x6B\x08\x84\x1E\x3E\xD6\x73\xE3\xF3\xB7\xB1\xD7\xDC\xD6\xA1\xE7\x17\x7A\x67\xDC\x51\xCF\xF3\x23\xEE\x60\x05\x71\x15\x9F\xC1\x0A\xBD\xB1\xD4\x43\x8E\xF2\x37\xFE\xD2\xC5\x95\xDE\xE0\x7E\xA8\xC0\xFA\xDE\xDF\xFF\x65\x26\xB0\xEE\x89\x3D\x3A\xC8\xE9\xBB\x40\xC2\xC3\xC7\xB7\x04\x2C\x3F\xDC\x9E\x17\x6B\x48\xCA\x3F\xFC\xF9\x5F\xBE\x2A\xC4\x23\x6F\x6F\x5A\x9B\x88\xF5\xB8\xC0\x64\x34\xF7\xD4\x96\x78\x7B\x36\x17\x53\xB1\xC1\xDD\x9A\xDE\x5D\x6C\x95\x04\x57\xC9\xB7\x34\x8E\x51\x34\x1F\x21\xE0\xD3\x1C\xF3\x5E\x95\x59\x76\x80\xA9\x1F\x6B\x66\x97\x8F\x3B\xE3\xB3\x37\xE9\xDB\xF2\x6F\xCF\xD3\xDC\x5F\x8A\x7C\x17\x06\xF3\xFA\x68\x5F\x04\xEE\x67\x1F\x71\xAB\x33\x7D\xFE\x36\xF6\x9A\x70\x21\x76\x05\x8E\x71\xB7\x2A\xE6\x47\x7C\xC6\x38\x3E\x83\x15\x2F\xF6\x4A\x3D\xE4\x88\x1D\xBC\xD8\x2B\xBF\xFD\xC6\xFB\x4F\x9F\xBC\xF9\x7E\x35\xAD\xE2\x85\x68\xF5\xC0\x45\x0E\x90\xEF\x60\x05\xBF\x6A\x8B\x44\x7C\xFE\x2A\xEC\x62\xE5\x89\x3D\x32\xC8\xF9\xBB\x40\x2C\x0F\x1F\xA7\x71\x0A\x49\xF9\x87\x3F\xBF\xDD\x22\x8C\xB7\x37\xAD\xBB\x2B\x8B\xC4\xFB\x85\x19\x91\xC9\x48\xEE\xE9\xA4\xE9\xED\xD9\xAD\x2B\xF0\xB2\xC0\x7A\x2E\xB8\xCA\x02\xEB\xBE\xE8\x3C\x17\x58\xF3\x16\x9E\x3C\xC7\x5A\xAE\xCA\xA8\x9F\x71\xD5\x52\x7A\xF6\x66\xE5\x1A\x4E\x85\x55\xB0\x33\x8A\xAB\xF4\x62\x22\xD6\x6E\x2A\x10\x66\xD5\x73\x6B\xA4\x72\xBF\xE2\x45\xD4\xE8\x0B\xBD\x58\x9F\xF1\xF1\x90\x30\x6F\x78\x05\x4F\x7A\x21\x76\x66\x8E\x79\x7E\xC4\x67\x8C\xEF\xC2\xEB\xB6\x99\x50\x5A\x83\xD3\x1D\xBC\xD1\x71\x08\x36\xA4\xBD\x32\x08\x2C\xCF\xA3\x14\xAD\x79\x37\xFB\xBC\x43\x04\xD6\x4D\xA0\xFC\xF5\xAB\x5D\xAC\x3C\xB1\x47\x6D\xD3\xA6\x5B\xA7\xF1\x5D\x20\x96\x87\x8F\xD3\x80\x04\x9B\xD3\x1D\xAC\xD9\x09\xA9\x4E\x8E\x94\xC9\x28\xEE\xB9\xB8\x0A\x85\x1E\x9E\x0B\x08\xE2\x36\xFE\x85\x06\x97\x8B\xAA\xB8\x40\xE4\x22\x6C\x8F\x41\x7A\x55\x9F\xDE\x22\x9C\xD5\x30\x4B\x39\xD6\x72\x55\x56\x13\x58\xD4\x4F\x5B\x25\xA4\x0D\x3D\xE6\xDB\x88\xE7\xFF\xDA\xAC\x7B\x7E\x56\x49\x58\xDD\x05\xD6\xED\x76\xCF\xD6\x05\x4A\xE9\x76\xD7\x2A\x22\x72\xCB\xAF\x7B\x3C\xC6\xDD\xE6\x4C\xEB\x33\x15\x58\x81\x57\x14\x59\x51\xE8\x5D\x25\x3F\xE2\x33\xC6\x71\x07\xEB\x9E\x33\x2F\xD7\xE0\x59\x7D\x32\xDA\x10\xBF\xE1\x18\xD6\xE3\x20\xB0\x6A\x8F\x52\x9C\x6D\xF7\x2A\xF8\x39\x44\x60\x85\x81\x6B\x8B\x44\x54\xD0\x79\x62\x97\xB6\x69\x7B\x9B\x43\x5A\x58\xE9\xBB\x40\x2C\x8A\x39\x6D\x7B\x61\x61\x0B\x0F\xB9\x07\x9B\xE3\xF3\x63\xB3\x1A\x43\x6A\x87\xE2\xEA\x22\x67\x32\x82\x7B\x49\x5C\x45\xFE\xE1\xF6\x6C\xBE\x40\x44\xA1\x95\x8B\xAD\xB4\xE9\xED\x0B\xAC\xFB\xAD\xDE\xD2\x2D\xC2\x91\x0B\x4F\x6B\x8E\x6D\x35\x0D\xEA\x47\x21\x53\x6E\x63\xE4\xB7\xD7\x62\x23\x2F\xDD\x16\x4A\x73\x4D\x51\x67\x5E\x2F\xF6\x84\xD5\x4D\x60\xDD\xC4\x55\xFA\xCE\xBE\xFC\x02\xE5\x8C\x7E\x8D\x16\x34\x79\x7D\xA6\x77\x2F\x22\xAF\x2B\x70\xCC\xF3\x23\xFD\x16\x61\x9E\x8B\xF9\x1A\x9C\xEE\x84\x8E\xBC\xF0\x88\x39\x1E\x6D\x8B\x02\xAB\xF6\xA8\x0E\x02\x2B\x8B\xE0\xDE\x22\x11\xAF\xC2\xE3\xD5\x43\x2E\x54\xB6\x16\x7C\x8F\xD8\x2A\x3D\xB7\x90\xBE\x0B\xA4\xA6\x98\x4B\xCD\x31\xDC\x26\x0C\xB6\xC5\xDB\x9B\xB3\x1A\x43\x2E\xF4\x5A\x05\xD7\x16\x93\xD2\x6D\x86\x5C\xD8\xB4\x2C\x38\xA5\xF9\x02\xF7\x74\x07\x2B\x9F\x3B\xCC\x9B\x8A\xAD\x92\xE0\x2A\xC5\x26\xBD\xAA\x8F\x0B\x50\x4D\xC0\xF7\xFA\xD8\x9B\x63\x7B\x4D\x83\xFA\xF9\xD0\xAB\x4F\x5E\x1C\x1F\x17\xD6\x9B\x38\xB9\x3D\xBB\x74\x17\x58\xF7\x6F\x8E\x95\x9E\xFF\xCB\x77\x51\x5B\xF2\xBF\xE6\x40\xFA\x0C\x52\x14\x50\xD1\xD6\xE7\xFF\xBD\x7F\xD3\x39\x3E\xB0\xBC\x75\x81\x52\xBA\xDD\x95\xD6\xD0\x8A\x7E\xC5\x3A\xCC\xFB\x7E\x5E\x9F\x9E\xFE\x5F\x12\xD7\x71\x27\x27\x3E\x7F\x9B\xAE\x3B\x71\xEE\x54\x68\x95\x7A\x53\x49\x7C\x78\xED\xAA\xE5\x45\xFC\xBC\x37\x3F\xF6\x9E\x31\xCE\xD7\xE0\xD4\x2F\x75\x1C\xF2\x58\x84\xFF\x1F\xBF\xE1\x18\x76\xD9\x5A\x76\xFA\xAD\x0C\x8F\x3C\x6E\xD8\x0E\x56\x74\x6A\x6F\x91\xB8\xED\x02\xDD\x1F\x2E\xDC\xDA\xA6\xCD\x17\xD8\xBC\x41\x6C\x01\x4C\x5F\xBF\x10\x0B\x2B\x7D\x17\x48\x4D\x31\x97\xC6\x8D\x36\xC7\xDB\x9B\x9E\xC6\x10\xC7\xDB\x6A\xD4\x79\x31\xC5\x86\x9B\xBF\x3E\xA2\xF6\x00\x78\x3A\xFE\x5E\x81\xA6\x4C\xF2\xA6\xD1\x53\x60\xE9\x9C\xA5\x18\x84\x82\x0A\x5B\xF4\xF9\x02\x91\xC6\x35\xF7\x31\x17\x5C\xA5\xD8\xA4\x57\xF5\xE9\x0E\x96\xB5\x61\x96\x9A\x79\xA9\x71\xD6\xFC\xB3\xE6\x98\xE5\x8A\x8C\xFA\x79\x19\xE9\xD6\xFA\x49\x5F\xB6\x18\x46\x2D\xF5\x9B\xE7\x42\xA4\xFE\x45\x0B\xAB\xE8\x2A\xD5\x76\x2A\xA8\xA2\x97\xF7\x6F\x34\xDF\x6E\x01\xE6\xAF\x90\x89\xE2\x6A\xEF\x19\xAC\x33\xFA\x95\x0A\x9D\x97\xFD\x7E\x3F\x0E\x2D\xFD\xAE\xB4\x83\x95\x8B\xA9\x33\x72\xCC\xF3\xA3\xB6\x89\x90\xAE\xC1\x9E\x3E\x99\xF7\x4A\x4B\x4D\xE6\xB9\x1C\x77\xB0\x6E\xEB\xC1\xFE\x2F\x5D\x58\x7A\xE5\x91\x42\x6A\x6B\xEE\x43\x05\x56\x14\x57\x69\x62\x97\xB6\x69\x6B\x05\xB7\x2D\xB0\x62\x93\xBA\xBD\xC5\x36\x6E\xAD\xC7\x77\x81\xB4\x04\x24\xDA\x1C\x12\xD3\x9B\x90\x77\x41\x71\x7B\xCE\x20\xFF\x2B\x09\xBE\xFC\x1B\x43\x39\x8B\xF2\xFF\xBF\x8F\x9F\x8F\x99\x36\xF0\x94\x49\x0B\xF7\x2D\xA1\x5B\xFA\x36\x5F\x2E\x70\xD3\x82\x2A\x5F\x25\x3E\x67\x94\x0B\xAE\x32\xBF\xF4\x21\xF7\xDB\x15\x7F\x4D\xC0\x5B\x72\x2B\xF7\xB3\xE6\x5F\xFA\xBE\x99\xBD\x1C\xB3\x34\x8D\xDA\x2E\x56\xBE\x5B\xD1\x12\xC7\x47\xA9\x9F\xF4\x65\x8B\x31\xEE\x7B\xCF\xFF\xBD\xBC\x90\x79\xF9\x45\x0B\xEF\xC5\xDE\xCB\x9A\xBF\xE7\xEC\x4D\x50\x6D\x0B\xAB\xF8\x79\xF4\xE3\xDE\x4F\x9E\xBF\x5E\x20\xBF\x2B\x90\xF7\x9D\x15\xFD\x0A\x36\xD6\x04\x4D\xEE\x6F\xA9\x9F\x5A\xFB\x5D\xFE\xFC\xED\xF3\xDB\xAA\xF7\x67\x42\xCF\x9E\x1F\xB5\x4D\x84\x74\x0D\x4E\x77\xF0\x4A\xBB\x74\x7B\x79\xE3\x5D\x0B\x42\xEC\xE2\x37\x1C\x2D\xEB\xB1\xA5\x57\xB6\xAC\xE7\xA3\xCF\x19\x2E\xB0\x82\x03\x96\x45\xA2\xB4\x18\xA6\x8B\xDF\xDE\xEE\x46\x7D\x81\xB8\x8B\xAB\x78\x8B\x60\x2F\xF1\x6A\x6F\xD5\x4E\xB7\x56\x3D\x8D\x61\xAB\x41\xC4\x7F\xCF\x77\xAA\xD2\x86\x9A\xFA\x58\x7B\x00\x3C\x2D\x84\x7C\xCC\xB4\x81\x47\xC1\x19\xFE\x5B\xDA\x1E\x8F\x31\xD9\x6E\x6C\xE5\x6F\xF6\x3D\x7F\xD8\xFC\xBE\x60\xD4\x04\xEE\x5E\x8C\x2D\x0B\x59\xED\x35\x0D\xB5\x85\xA7\x24\x56\x4B\xFF\x56\xF3\xCF\x9A\x63\xD6\xE2\xA6\x7E\x9E\x93\xDA\x12\xDB\xB5\xFA\x49\xF3\x6F\xAB\xDF\x6C\xF5\x1C\x6B\x6E\xD4\x7A\x51\x5D\x60\x3D\x7F\xE9\x71\xFE\x33\x5E\xF9\xB7\xC1\xD2\x1A\x2D\xDD\xE2\x29\x3D\xD7\x58\xEB\x1F\x5B\xBE\x96\x7C\x2B\x31\x8F\x7D\x2B\x3D\xBE\xB4\x13\x97\x1F\x67\xA9\xCF\x92\x6D\x2D\xFD\xAE\xB4\x63\xF2\xF2\x31\x89\xE7\x77\x57\xF2\x3E\xB8\x22\xC7\x52\x7E\xD4\xFA\x8C\x65\xA3\x23\x5F\x0B\xF2\x38\x58\x6A\x32\xBF\x78\x88\xDF\x70\xAC\xBD\x2A\xE9\xAC\xE2\x2A\x30\x9A\x22\xB0\x2C\x22\x2B\x06\xAC\xB4\x4D\xFB\x32\x98\xE5\x1D\xA0\x97\xCD\xEB\xE5\x73\x0B\xB7\x6F\xB1\xF5\xFF\x2E\x5C\xDC\x5A\x8D\xB6\x59\xBE\x09\xD7\x26\xB0\x9E\x7F\x63\xA8\xDC\x60\xB6\x77\x7B\x5E\x0A\xAC\x32\x93\x16\xEE\xB6\xA2\x7A\x39\x5F\xAD\xA0\x6A\xC5\x6C\x59\xC4\xCA\xDF\x22\xDC\x6F\x98\xA5\x79\xEB\x02\xAB\x3D\xC7\x6A\x8D\x2F\xFD\xBC\x26\xB2\xA8\x9F\xF2\x2F\x31\xA4\xBB\x3D\xE9\xCB\x16\xB7\x78\x85\x7F\x2F\xD5\xB2\x35\x37\x2C\xB9\x59\x12\x1E\xF1\xDF\x62\xBD\x96\x84\x55\x14\x24\x5B\x17\x87\x69\x0D\xEF\x3D\xD7\x58\x7B\xC4\x40\x23\xB0\x9E\xBF\x5B\xB0\xE6\x57\xE4\x9B\x5F\xE8\x8D\xEA\x77\x7B\x6B\xC0\x99\x39\xC6\x3B\x05\x9E\xDE\x92\xB3\xCF\x77\xFD\xB7\xD6\x2D\xCB\xA6\xC7\xF3\x8B\xD1\xE7\x17\x0F\xF1\x1B\x8E\x96\xF5\xD8\xEB\xCF\x2A\xC7\x4F\x13\x58\x35\x91\x55\x0A\x72\x5A\x5C\x7B\xDF\x30\xAB\x35\xB5\xF4\xBE\x74\x2D\x01\x53\xB5\x5C\x5B\xD4\xAC\x57\x8C\xB9\x7D\x96\xED\xD4\xB4\xE1\xA6\xCF\x16\xA5\x0B\x80\x25\xF1\xB7\xB6\xCC\x73\x26\x5B\xCF\x60\xB5\x7C\xB3\xAF\xB4\x93\x94\xCE\x57\x2B\xA8\x52\x3C\xBD\x3B\x58\xE9\x18\xD6\x86\xB9\xB5\xB0\x58\x6E\x11\xB6\xE6\x98\xA7\x11\xD4\xBE\x59\xB8\x75\x9B\x23\xCF\x19\xCB\xED\xD6\xB8\x98\x87\xFF\xB6\xFA\xB6\x5A\xFD\xC4\xDA\x2F\x7F\x8B\xF0\x7E\x91\x52\x5A\xE4\xAD\xB9\xB1\xDD\x8B\xCA\x2F\x33\xCE\x2F\x80\xF6\x84\xD5\x2D\x26\xF5\x97\x22\x97\xF2\x60\xAB\x97\xAE\xE2\x57\xB4\x63\x4F\x18\x2A\xFB\xDD\x55\x39\xF6\xDE\x99\x69\x8D\x83\x65\x4D\xCB\x45\xF6\xDE\x37\x1C\x63\xAC\xCF\xBC\x7B\x15\x7C\x98\x2A\xB0\x22\xB4\x5A\xE3\x4D\x8B\xDE\x52\x70\x5B\x4D\x2D\x6D\x56\x96\xAD\xD3\x52\x30\xAD\xB6\x7A\xEC\xB4\xEC\xFC\x44\x9F\xF2\x6F\x0C\x95\x1A\xE2\xDE\x37\xEE\xF6\x1A\x78\xCA\xA4\xB4\x3D\x9E\xCF\x65\xFD\x66\x5F\x3A\xA7\x37\x06\x1E\xC1\xE1\x3D\xB6\xB6\xF0\x94\xC4\x6B\x89\x77\x8F\x7F\x8A\x86\x61\xCD\xC9\x9B\xED\x2F\xDF\x31\x66\xF9\xC2\x40\x14\x56\x51\x68\x5D\xA1\x7E\x2C\xB7\xD7\xB6\x98\x59\x73\x63\x5B\x60\x3D\x7F\xD6\x2A\xAD\xEF\xF4\x9C\xAD\x67\xB0\x2C\x82\x20\x1D\xA7\x14\xF7\xD2\xBF\xAD\xE4\x97\xA5\x3E\x4B\xF6\xEE\xDD\x22\xEC\xED\x3F\x67\xE4\x58\xCA\x41\xEB\xC6\x41\xCC\x7F\xCB\x33\x58\x96\x4D\x8F\xAD\x5E\x19\xE6\xA9\xDD\xC9\x50\xF4\x4A\xEF\x1A\xA1\x3E\xFE\x10\x81\x15\x9C\xB0\x5C\x8D\x97\x84\x56\x69\xC1\xAB\x35\xB5\xD6\xC5\xC1\x22\x08\x3D\x09\x19\xC7\xDB\x5A\xE0\xF2\x9D\xAA\x74\x71\x2B\x35\xCF\xF8\x6F\x7B\xDF\xB8\xCB\xC7\xCC\x9F\xC1\xCA\x1B\xF7\x96\xD0\xB2\x08\xBB\xD2\xA2\x51\x9B\x2F\xF5\xCB\xF3\x7B\x7C\xAD\x85\xB0\xD7\x30\xB7\x72\x2B\x8F\x57\xE9\xDB\x8A\xBD\x39\xE6\xF5\x87\xFA\x79\x49\xAC\x56\x3F\x7B\xBB\xD7\xA5\xDB\x1D\x96\x67\x6C\xBC\x62\x35\xB7\x7A\xEF\x16\xFE\xAD\xFE\xEB\x3B\x56\x7B\xB9\x73\x36\xBF\x6A\xF5\x59\xEB\x43\xDE\x7E\x67\xAD\xBB\xB3\x71\x8C\x7E\xF5\xBC\x06\x26\x67\xBD\x57\x0F\x96\x35\x2D\xBF\x78\xA8\xDD\xC9\x40\x60\x59\xB3\x73\xE7\x38\xEF\x42\x11\x05\x8D\x65\xEA\xF4\xC1\xCA\xDA\xD6\xA9\x65\x3C\xCF\xCE\xC1\x9E\x9D\x9E\x1D\xAC\xFC\x1B\x43\xA5\x06\xB3\x97\xF8\x7B\x0D\x7C\x8F\x49\x4B\xA3\x8B\x0C\xB7\xEE\xBB\xB7\xC6\xA0\x96\x23\x79\xEC\x6A\x5F\x52\xC8\x63\x93\xC6\xA3\xB4\xD5\x9D\xC7\x4B\xED\x9F\x25\xF7\xB6\x8E\xA9\xB1\xB1\xC4\x71\x6B\xEC\xAB\xD5\x8F\x55\xAC\x6C\xED\xF4\x58\x72\x63\x9B\x65\x79\x07\x6B\xFB\x5B\x6F\xFB\xC2\x2A\x5F\x7C\x6A\x79\x90\xE6\xFC\x91\xCF\x60\x79\x63\x30\xAB\xDF\x79\x2E\xEE\xCE\x98\x1F\xBD\xFD\xA3\x16\x07\xCB\x9A\x96\x7F\xD1\xA1\x75\x3D\xE8\xE9\x97\xB3\xCF\x3D\x6C\x07\x2B\x75\xD4\xD3\x1C\xB6\x76\x19\x4A\xE0\x72\xC5\x5C\x3A\xC6\xAB\x92\x6B\xB6\x96\xAE\x74\xF2\x79\x2D\xF7\xAB\x53\xB1\xB2\xB5\xCB\x14\x8F\xD9\x6B\x98\xAD\x0D\xFC\x3E\xF6\xCB\x67\x53\x4A\x9F\xA5\x3E\x96\x9E\xC1\x3A\xAA\x98\x6A\xF1\xDA\x13\x5B\x5B\x7E\xAE\xE4\x5F\xB0\x51\xE1\xE3\x23\xD5\x8F\xB5\xC9\x5A\x76\xB0\xB6\x6A\x39\x9F\x63\x2B\xFF\xB7\x2E\x80\xF6\x6C\x6C\xDD\x95\xD8\xCA\xE7\xD2\xE2\x78\x84\x5F\x5B\x3E\xD7\xE2\x90\x7E\xDE\xD2\xEF\xBC\x8F\x86\xAC\xCE\xD1\xBB\xA6\xB5\xF4\x90\x7C\x1D\xB6\xAC\x69\x96\xF5\x38\x8C\xDB\x62\xBF\xB5\xA6\x67\x1F\xB7\x84\xC0\x8A\x4E\x5B\x16\x8A\x7C\x41\xDC\x03\x56\xBB\x5A\xEA\x09\xA4\xC5\xD6\xAD\xA4\xB3\xA8\xFD\xBB\xC0\xAA\xDF\x22\x68\xD9\xC1\x6A\x49\xB4\x5A\xA3\x4B\x45\xA1\xD5\xFE\x9E\x18\x78\x7C\xB0\xC4\x6B\x2B\xB7\x2C\x3B\x58\x5B\xB6\xCC\xF2\xCF\xDA\x24\xA9\x9F\x7B\xA4\x2C\x3B\x9D\x69\x5C\x67\xEC\x60\xB5\x0A\xAB\xFC\x3C\x6B\xBE\x5B\x73\x7E\xCB\xAE\xED\xD7\x34\xD4\xFB\x56\x1C\xB3\x37\x0E\xFB\xAF\x69\xF0\xED\x04\x9E\x9D\xA3\xA7\x27\x96\x8E\x6D\xCD\x1B\xCB\x9A\x36\x72\x3D\xEE\xF5\x7B\xD4\xF9\x4B\x09\xAC\xD4\x49\x4F\xA0\xBD\x70\x94\x8B\x5E\x8B\x9D\x16\xB5\xEF\xF5\x69\x6B\x21\xA8\x25\x75\xDA\xE4\x3C\x8B\xF4\xDE\x42\x6D\x99\x53\x19\x03\x0F\x2B\x45\xBC\x2C\xFE\x05\x9B\x8E\xF2\xD1\x1B\x47\x0F\x3F\xB5\x5F\x8A\x78\x58\xC5\x7C\xEA\x67\xEB\xAE\x45\xCE\xAA\x77\xA7\xA7\xC6\x5E\x91\x43\x4A\xC6\xB9\xBD\xD6\x5A\xC8\xCF\xEB\xDD\x85\x53\xF5\xBB\x1A\xFF\xDE\x35\xE9\x0C\xF9\xB1\xC5\xC0\x93\x37\xBD\x6B\x9A\x22\xCF\x3D\xB1\x9C\x75\xEC\xB2\x02\x2B\x02\xF0\x04\xB9\x06\x6D\x64\x10\x95\x76\xD6\xFC\x50\x7F\xAE\x5A\x6C\xAC\x76\x8D\x8C\x83\xD5\x86\x91\x22\x64\x15\xFF\xD4\x3E\x8E\xF4\x6B\x56\xFD\x58\x7D\x98\x65\xCF\x56\xBE\x5A\xED\xF4\xE4\xBB\x3A\x1F\xBC\x73\xB7\x88\xF3\x11\x71\x50\xB0\x1D\x61\x97\x87\xA7\xC2\x07\xCF\x7C\xA3\xFC\x9D\xED\x87\xC7\x67\xC5\xB1\xCB\x0B\xAC\xDC\x49\x6F\xA0\x8F\x0A\xA0\xD7\xCE\xBD\x60\x6E\xF9\xD0\x33\x87\x97\x4B\xCF\x5C\x2D\x8D\x55\x91\xDC\xDE\x31\x7A\x7C\xF4\xF2\xF4\xDA\xA6\x3A\xDE\xEB\xE3\x51\x7E\x79\xED\x6C\xA9\x1F\x0F\x53\xA5\x3D\xF9\xBC\x47\x31\x1E\x2D\xB8\xD4\x7E\xF5\xC4\x40\x6D\x4B\xEF\xBA\xE4\xC9\xBD\xD1\xB6\x7B\x6C\x51\xE5\xCC\x6A\x3E\x79\x19\x58\x8F\x3F\x9D\xC0\xB2\x3A\xB6\xF2\x71\x5B\x8D\x42\x95\x74\xF9\xF8\xAA\x71\x3D\x4D\x65\xD4\x9C\xB3\xE3\x3A\x3A\x56\xB3\xFD\xB9\xC2\x7C\x2B\xC5\xC4\xBA\xE8\x9F\xAD\x1E\xCE\xE4\xD7\xAC\x7E\xD7\x52\x3B\x67\xE2\xD8\xE2\x5F\x3C\xA7\xE6\xE7\xD9\xF2\xBF\x87\x45\x7A\x2E\x02\x4B\x45\x92\x71\x20\x00\x01\x08\x40\x00\x02\x10\x80\xC0\x2F\x08\x20\xB0\x48\x05\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\x80\xC0\x22\x07\x20\x00\x01\x08\x40\x00\x02\x10\x80\x80\x98\x00\x02\x4B\x0C\x94\xE1\x20\x00\x01\x08\x40\x00\x02\x10\x80\x00\x02\x8B\x1C\x80\x00\x04\x20\x00\x01\x08\x40\x00\x02\x62\x02\x08\x2C\x31\x50\x86\x83\x00\x04\x20\x00\x01\x08\x40\x00\x02\x08\x2C\x72\x00\x02\x10\x80\x00\x04\x20\x00\x01\x08\x88\x09\x20\xB0\xC4\x40\x19\x0E\x02\x10\x80\x00\x04\x20\x00\x01\x08\x20\xB0\xC8\x01\x08\x40\x00\x02\x10\x80\x00\x04\x20\x20\x26\x80\xC0\x12\x03\x65\x38\x08\x40\x00\x02\x10\x80\x00\x04\x20\xF0\xFF\x01\x55\x97\x53\x3A\xB0\x64\x29\xD6\x00\x00\x00\x00\x49\x45\x4E\x44\xAE\x42\x60\x82"
